
HomeAutomationSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08005f18  08005f18  00015f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060f4  080060f4  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080060f4  080060f4  000160f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060fc  080060fc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060fc  080060fc  000160fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006100  08006100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00012df0  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012e08  20012e08  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   000134e8  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002adf  00000000  00000000  00033530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  00036010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f68  00000000  00000000  00037080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000204ca  00000000  00000000  00037fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d40  00000000  00000000  000584b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2ea2  00000000  00000000  0006c1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f094  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004484  00000000  00000000  0013f0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f00 	.word	0x08005f00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08005f00 	.word	0x08005f00

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f103 0208 	add.w	r2, r3, #8
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	f04f 32ff 	mov.w	r2, #4294967295
 80004ec:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f103 0208 	add.w	r2, r3, #8
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f103 0208 	add.w	r2, r3, #8
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2200      	movs	r2, #0
 8000520:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800052e:	b480      	push	{r7}
 8000530:	b085      	sub	sp, #20
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000544:	d103      	bne.n	800054e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	691b      	ldr	r3, [r3, #16]
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	e00c      	b.n	8000568 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	3308      	adds	r3, #8
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	e002      	b.n	800055c <vListInsert+0x2e>
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	68ba      	ldr	r2, [r7, #8]
 8000564:	429a      	cmp	r2, r3
 8000566:	d2f6      	bcs.n	8000556 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	685a      	ldr	r2, [r3, #4]
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	683a      	ldr	r2, [r7, #0]
 8000576:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	601a      	str	r2, [r3, #0]
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	691b      	ldr	r3, [r3, #16]
 80005ac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	6892      	ldr	r2, [r2, #8]
 80005b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	6852      	ldr	r2, [r2, #4]
 80005c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d103      	bne.n	80005d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689a      	ldr	r2, [r3, #8]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	1e5a      	subs	r2, r3, #1
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80005fe:	2301      	movs	r3, #1
 8000600:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d10a      	bne.n	8000622 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000610:	f383 8811 	msr	BASEPRI, r3
 8000614:	f3bf 8f6f 	isb	sy
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800061e:	bf00      	nop
 8000620:	e7fe      	b.n	8000620 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d05d      	beq.n	80006e4 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800062c:	2b00      	cmp	r3, #0
 800062e:	d059      	beq.n	80006e4 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000638:	2100      	movs	r1, #0
 800063a:	fba3 2302 	umull	r2, r3, r3, r2
 800063e:	2b00      	cmp	r3, #0
 8000640:	d000      	beq.n	8000644 <xQueueGenericReset+0x50>
 8000642:	2101      	movs	r1, #1
 8000644:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000646:	2b00      	cmp	r3, #0
 8000648:	d14c      	bne.n	80006e4 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800064a:	f002 f8d5 	bl	80027f8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000656:	6939      	ldr	r1, [r7, #16]
 8000658:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800065a:	fb01 f303 	mul.w	r3, r1, r3
 800065e:	441a      	add	r2, r3
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	2200      	movs	r2, #0
 8000668:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800067a:	3b01      	subs	r3, #1
 800067c:	6939      	ldr	r1, [r7, #16]
 800067e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000680:	fb01 f303 	mul.w	r3, r1, r3
 8000684:	441a      	add	r2, r3
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	22ff      	movs	r2, #255	; 0xff
 800068e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	22ff      	movs	r2, #255	; 0xff
 8000696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d114      	bne.n	80006ca <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d01a      	beq.n	80006de <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	3310      	adds	r3, #16
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 f945 	bl	800193c <xTaskRemoveFromEventList>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d012      	beq.n	80006de <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <xQueueGenericReset+0x11c>)
 80006ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	f3bf 8f4f 	dsb	sy
 80006c4:	f3bf 8f6f 	isb	sy
 80006c8:	e009      	b.n	80006de <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	3310      	adds	r3, #16
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff00 	bl	80004d4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	3324      	adds	r3, #36	; 0x24
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fefb 	bl	80004d4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80006de:	f002 f8bb 	bl	8002858 <vPortExitCritical>
 80006e2:	e001      	b.n	80006e8 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d10a      	bne.n	8000704 <xQueueGenericReset+0x110>
        __asm volatile
 80006ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f2:	f383 8811 	msr	BASEPRI, r3
 80006f6:	f3bf 8f6f 	isb	sy
 80006fa:	f3bf 8f4f 	dsb	sy
 80006fe:	60bb      	str	r3, [r7, #8]
    }
 8000700:	bf00      	nop
 8000702:	e7fe      	b.n	8000702 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000704:	697b      	ldr	r3, [r7, #20]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	e000ed04 	.word	0xe000ed04

08000714 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af02      	add	r7, sp, #8
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	4613      	mov	r3, r2
 8000720:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d02e      	beq.n	800078a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800072c:	2100      	movs	r1, #0
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	fba3 2302 	umull	r2, r3, r3, r2
 8000736:	2b00      	cmp	r3, #0
 8000738:	d000      	beq.n	800073c <xQueueGenericCreate+0x28>
 800073a:	2101      	movs	r1, #1
 800073c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800073e:	2b00      	cmp	r3, #0
 8000740:	d123      	bne.n	800078a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	68ba      	ldr	r2, [r7, #8]
 8000746:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800074a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800074e:	d81c      	bhi.n	800078a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	68ba      	ldr	r2, [r7, #8]
 8000754:	fb02 f303 	mul.w	r3, r2, r3
 8000758:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800075a:	69bb      	ldr	r3, [r7, #24]
 800075c:	3350      	adds	r3, #80	; 0x50
 800075e:	4618      	mov	r0, r3
 8000760:	f002 f96c 	bl	8002a3c <pvPortMalloc>
 8000764:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d01c      	beq.n	80007a6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	3350      	adds	r3, #80	; 0x50
 8000774:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000776:	79fa      	ldrb	r2, [r7, #7]
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	4613      	mov	r3, r2
 800077e:	697a      	ldr	r2, [r7, #20]
 8000780:	68b9      	ldr	r1, [r7, #8]
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f000 f814 	bl	80007b0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000788:	e00d      	b.n	80007a6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d10a      	bne.n	80007a6 <xQueueGenericCreate+0x92>
        __asm volatile
 8000790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000794:	f383 8811 	msr	BASEPRI, r3
 8000798:	f3bf 8f6f 	isb	sy
 800079c:	f3bf 8f4f 	dsb	sy
 80007a0:	613b      	str	r3, [r7, #16]
    }
 80007a2:	bf00      	nop
 80007a4:	e7fe      	b.n	80007a4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80007a6:	69fb      	ldr	r3, [r7, #28]
    }
 80007a8:	4618      	mov	r0, r3
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d103      	bne.n	80007cc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	69ba      	ldr	r2, [r7, #24]
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	e002      	b.n	80007d2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80007de:	2101      	movs	r1, #1
 80007e0:	69b8      	ldr	r0, [r7, #24]
 80007e2:	f7ff ff07 	bl	80005f4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80007e6:	69bb      	ldr	r3, [r7, #24]
 80007e8:	78fa      	ldrb	r2, [r7, #3]
 80007ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	; 0x30
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
 8000804:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000806:	2300      	movs	r3, #0
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 800080e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000810:	2b00      	cmp	r3, #0
 8000812:	d10a      	bne.n	800082a <xQueueGenericSend+0x32>
        __asm volatile
 8000814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000818:	f383 8811 	msr	BASEPRI, r3
 800081c:	f3bf 8f6f 	isb	sy
 8000820:	f3bf 8f4f 	dsb	sy
 8000824:	623b      	str	r3, [r7, #32]
    }
 8000826:	bf00      	nop
 8000828:	e7fe      	b.n	8000828 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d103      	bne.n	8000838 <xQueueGenericSend+0x40>
 8000830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	2b00      	cmp	r3, #0
 8000836:	d101      	bne.n	800083c <xQueueGenericSend+0x44>
 8000838:	2301      	movs	r3, #1
 800083a:	e000      	b.n	800083e <xQueueGenericSend+0x46>
 800083c:	2300      	movs	r3, #0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d10a      	bne.n	8000858 <xQueueGenericSend+0x60>
        __asm volatile
 8000842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000846:	f383 8811 	msr	BASEPRI, r3
 800084a:	f3bf 8f6f 	isb	sy
 800084e:	f3bf 8f4f 	dsb	sy
 8000852:	61fb      	str	r3, [r7, #28]
    }
 8000854:	bf00      	nop
 8000856:	e7fe      	b.n	8000856 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d103      	bne.n	8000866 <xQueueGenericSend+0x6e>
 800085e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000862:	2b01      	cmp	r3, #1
 8000864:	d101      	bne.n	800086a <xQueueGenericSend+0x72>
 8000866:	2301      	movs	r3, #1
 8000868:	e000      	b.n	800086c <xQueueGenericSend+0x74>
 800086a:	2300      	movs	r3, #0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d10a      	bne.n	8000886 <xQueueGenericSend+0x8e>
        __asm volatile
 8000870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000874:	f383 8811 	msr	BASEPRI, r3
 8000878:	f3bf 8f6f 	isb	sy
 800087c:	f3bf 8f4f 	dsb	sy
 8000880:	61bb      	str	r3, [r7, #24]
    }
 8000882:	bf00      	nop
 8000884:	e7fe      	b.n	8000884 <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000886:	f001 ffb7 	bl	80027f8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800088a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800088c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800088e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000892:	429a      	cmp	r2, r3
 8000894:	d302      	bcc.n	800089c <xQueueGenericSend+0xa4>
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d129      	bne.n	80008f0 <xQueueGenericSend+0xf8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800089c:	683a      	ldr	r2, [r7, #0]
 800089e:	68b9      	ldr	r1, [r7, #8]
 80008a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80008a2:	f000 faae 	bl	8000e02 <prvCopyDataToQueue>
 80008a6:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80008a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d010      	beq.n	80008d2 <xQueueGenericSend+0xda>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80008b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008b2:	3324      	adds	r3, #36	; 0x24
 80008b4:	4618      	mov	r0, r3
 80008b6:	f001 f841 	bl	800193c <xTaskRemoveFromEventList>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d013      	beq.n	80008e8 <xQueueGenericSend+0xf0>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80008c0:	4b3f      	ldr	r3, [pc, #252]	; (80009c0 <xQueueGenericSend+0x1c8>)
 80008c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	f3bf 8f4f 	dsb	sy
 80008cc:	f3bf 8f6f 	isb	sy
 80008d0:	e00a      	b.n	80008e8 <xQueueGenericSend+0xf0>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80008d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d007      	beq.n	80008e8 <xQueueGenericSend+0xf0>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80008d8:	4b39      	ldr	r3, [pc, #228]	; (80009c0 <xQueueGenericSend+0x1c8>)
 80008da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	f3bf 8f4f 	dsb	sy
 80008e4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80008e8:	f001 ffb6 	bl	8002858 <vPortExitCritical>
                return pdPASS;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e063      	b.n	80009b8 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d103      	bne.n	80008fe <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80008f6:	f001 ffaf 	bl	8002858 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e05c      	b.n	80009b8 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80008fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000900:	2b00      	cmp	r3, #0
 8000902:	d106      	bne.n	8000912 <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4618      	mov	r0, r3
 800090a:	f001 f8ed 	bl	8001ae8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800090e:	2301      	movs	r3, #1
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000912:	f001 ffa1 	bl	8002858 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000916:	f000 fd71 	bl	80013fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800091a:	f001 ff6d 	bl	80027f8 <vPortEnterCritical>
 800091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000924:	b25b      	sxtb	r3, r3
 8000926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800092a:	d103      	bne.n	8000934 <xQueueGenericSend+0x13c>
 800092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092e:	2200      	movs	r2, #0
 8000930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000936:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800093a:	b25b      	sxtb	r3, r3
 800093c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000940:	d103      	bne.n	800094a <xQueueGenericSend+0x152>
 8000942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800094a:	f001 ff85 	bl	8002858 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800094e:	1d3a      	adds	r2, r7, #4
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4611      	mov	r1, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f001 f8dc 	bl	8001b14 <xTaskCheckForTimeOut>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d124      	bne.n	80009ac <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000964:	f000 fb45 	bl	8000ff2 <prvIsQueueFull>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d018      	beq.n	80009a0 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800096e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000970:	3310      	adds	r3, #16
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	4611      	mov	r1, r2
 8000976:	4618      	mov	r0, r3
 8000978:	f000 ffbc 	bl	80018f4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800097c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800097e:	f000 fad0 	bl	8000f22 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000982:	f000 fd49 	bl	8001418 <xTaskResumeAll>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	f47f af7c 	bne.w	8000886 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <xQueueGenericSend+0x1c8>)
 8000990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	f3bf 8f4f 	dsb	sy
 800099a:	f3bf 8f6f 	isb	sy
 800099e:	e772      	b.n	8000886 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80009a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009a2:	f000 fabe 	bl	8000f22 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80009a6:	f000 fd37 	bl	8001418 <xTaskResumeAll>
 80009aa:	e76c      	b.n	8000886 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80009ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009ae:	f000 fab8 	bl	8000f22 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80009b2:	f000 fd31 	bl	8001418 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80009b6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3730      	adds	r7, #48	; 0x30
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	e000ed04 	.word	0xe000ed04

080009c4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b090      	sub	sp, #64	; 0x40
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80009d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d10a      	bne.n	80009f2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80009dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009e0:	f383 8811 	msr	BASEPRI, r3
 80009e4:	f3bf 8f6f 	isb	sy
 80009e8:	f3bf 8f4f 	dsb	sy
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80009ee:	bf00      	nop
 80009f0:	e7fe      	b.n	80009f0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d103      	bne.n	8000a00 <xQueueGenericSendFromISR+0x3c>
 80009f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d101      	bne.n	8000a04 <xQueueGenericSendFromISR+0x40>
 8000a00:	2301      	movs	r3, #1
 8000a02:	e000      	b.n	8000a06 <xQueueGenericSendFromISR+0x42>
 8000a04:	2300      	movs	r3, #0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10a      	bne.n	8000a20 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a0e:	f383 8811 	msr	BASEPRI, r3
 8000a12:	f3bf 8f6f 	isb	sy
 8000a16:	f3bf 8f4f 	dsb	sy
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000a1c:	bf00      	nop
 8000a1e:	e7fe      	b.n	8000a1e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d103      	bne.n	8000a2e <xQueueGenericSendFromISR+0x6a>
 8000a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d101      	bne.n	8000a32 <xQueueGenericSendFromISR+0x6e>
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e000      	b.n	8000a34 <xQueueGenericSendFromISR+0x70>
 8000a32:	2300      	movs	r3, #0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d10a      	bne.n	8000a4e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a3c:	f383 8811 	msr	BASEPRI, r3
 8000a40:	f3bf 8f6f 	isb	sy
 8000a44:	f3bf 8f4f 	dsb	sy
 8000a48:	623b      	str	r3, [r7, #32]
    }
 8000a4a:	bf00      	nop
 8000a4c:	e7fe      	b.n	8000a4c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000a4e:	f001 ffb5 	bl	80029bc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000a52:	f3ef 8211 	mrs	r2, BASEPRI
 8000a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a5a:	f383 8811 	msr	BASEPRI, r3
 8000a5e:	f3bf 8f6f 	isb	sy
 8000a62:	f3bf 8f4f 	dsb	sy
 8000a66:	61fa      	str	r2, [r7, #28]
 8000a68:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000a6a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d302      	bcc.n	8000a80 <xQueueGenericSendFromISR+0xbc>
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d13e      	bne.n	8000afe <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	68b9      	ldr	r1, [r7, #8]
 8000a94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000a96:	f000 f9b4 	bl	8000e02 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000a9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa2:	d112      	bne.n	8000aca <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d025      	beq.n	8000af8 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aae:	3324      	adds	r3, #36	; 0x24
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 ff43 	bl	800193c <xTaskRemoveFromEventList>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d01d      	beq.n	8000af8 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d01a      	beq.n	8000af8 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	e016      	b.n	8000af8 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000aca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000ace:	2b7f      	cmp	r3, #127	; 0x7f
 8000ad0:	d10a      	bne.n	8000ae8 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8000ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ad6:	f383 8811 	msr	BASEPRI, r3
 8000ada:	f3bf 8f6f 	isb	sy
 8000ade:	f3bf 8f4f 	dsb	sy
 8000ae2:	617b      	str	r3, [r7, #20]
    }
 8000ae4:	bf00      	nop
 8000ae6:	e7fe      	b.n	8000ae6 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aec:	3301      	adds	r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	b25a      	sxtb	r2, r3
 8000af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000af8:	2301      	movs	r3, #1
 8000afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000afc:	e001      	b.n	8000b02 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b04:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000b0c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3740      	adds	r7, #64	; 0x40
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	; 0x30
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d10a      	bne.n	8000b48 <xQueueReceive+0x30>
        __asm volatile
 8000b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b36:	f383 8811 	msr	BASEPRI, r3
 8000b3a:	f3bf 8f6f 	isb	sy
 8000b3e:	f3bf 8f4f 	dsb	sy
 8000b42:	623b      	str	r3, [r7, #32]
    }
 8000b44:	bf00      	nop
 8000b46:	e7fe      	b.n	8000b46 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d103      	bne.n	8000b56 <xQueueReceive+0x3e>
 8000b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d101      	bne.n	8000b5a <xQueueReceive+0x42>
 8000b56:	2301      	movs	r3, #1
 8000b58:	e000      	b.n	8000b5c <xQueueReceive+0x44>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d10a      	bne.n	8000b76 <xQueueReceive+0x5e>
        __asm volatile
 8000b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b64:	f383 8811 	msr	BASEPRI, r3
 8000b68:	f3bf 8f6f 	isb	sy
 8000b6c:	f3bf 8f4f 	dsb	sy
 8000b70:	61fb      	str	r3, [r7, #28]
    }
 8000b72:	bf00      	nop
 8000b74:	e7fe      	b.n	8000b74 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000b76:	f001 fe3f 	bl	80027f8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d01f      	beq.n	8000bc6 <xQueueReceive+0xae>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000b86:	68b9      	ldr	r1, [r7, #8]
 8000b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b8a:	f000 f9a4 	bl	8000ed6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	1e5a      	subs	r2, r3, #1
 8000b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b98:	691b      	ldr	r3, [r3, #16]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00f      	beq.n	8000bbe <xQueueReceive+0xa6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba0:	3310      	adds	r3, #16
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 feca 	bl	800193c <xTaskRemoveFromEventList>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d007      	beq.n	8000bbe <xQueueReceive+0xa6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000bae:	4b3d      	ldr	r3, [pc, #244]	; (8000ca4 <xQueueReceive+0x18c>)
 8000bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	f3bf 8f4f 	dsb	sy
 8000bba:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000bbe:	f001 fe4b 	bl	8002858 <vPortExitCritical>
                return pdPASS;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e069      	b.n	8000c9a <xQueueReceive+0x182>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d103      	bne.n	8000bd4 <xQueueReceive+0xbc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000bcc:	f001 fe44 	bl	8002858 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	e062      	b.n	8000c9a <xQueueReceive+0x182>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d106      	bne.n	8000be8 <xQueueReceive+0xd0>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 ff82 	bl	8001ae8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000be4:	2301      	movs	r3, #1
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000be8:	f001 fe36 	bl	8002858 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000bec:	f000 fc06 	bl	80013fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000bf0:	f001 fe02 	bl	80027f8 <vPortEnterCritical>
 8000bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bfa:	b25b      	sxtb	r3, r3
 8000bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c00:	d103      	bne.n	8000c0a <xQueueReceive+0xf2>
 8000c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c16:	d103      	bne.n	8000c20 <xQueueReceive+0x108>
 8000c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c20:	f001 fe1a 	bl	8002858 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c24:	1d3a      	adds	r2, r7, #4
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 ff71 	bl	8001b14 <xTaskCheckForTimeOut>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d123      	bne.n	8000c80 <xQueueReceive+0x168>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c3a:	f000 f9c4 	bl	8000fc6 <prvIsQueueEmpty>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d017      	beq.n	8000c74 <xQueueReceive+0x15c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c46:	3324      	adds	r3, #36	; 0x24
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 fe51 	bl	80018f4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c54:	f000 f965 	bl	8000f22 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000c58:	f000 fbde 	bl	8001418 <xTaskResumeAll>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d189      	bne.n	8000b76 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <xQueueReceive+0x18c>)
 8000c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	f3bf 8f4f 	dsb	sy
 8000c6e:	f3bf 8f6f 	isb	sy
 8000c72:	e780      	b.n	8000b76 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c76:	f000 f954 	bl	8000f22 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000c7a:	f000 fbcd 	bl	8001418 <xTaskResumeAll>
 8000c7e:	e77a      	b.n	8000b76 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c82:	f000 f94e 	bl	8000f22 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000c86:	f000 fbc7 	bl	8001418 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c8c:	f000 f99b 	bl	8000fc6 <prvIsQueueEmpty>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f43f af6f 	beq.w	8000b76 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000c98:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3730      	adds	r7, #48	; 0x30
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	e000ed04 	.word	0xe000ed04

08000ca8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b090      	sub	sp, #64	; 0x40
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d10a      	bne.n	8000cd4 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8000cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cc2:	f383 8811 	msr	BASEPRI, r3
 8000cc6:	f3bf 8f6f 	isb	sy
 8000cca:	f3bf 8f4f 	dsb	sy
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000cd0:	bf00      	nop
 8000cd2:	e7fe      	b.n	8000cd2 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d103      	bne.n	8000ce2 <xQueueReceiveFromISR+0x3a>
 8000cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <xQueueReceiveFromISR+0x3e>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e000      	b.n	8000ce8 <xQueueReceiveFromISR+0x40>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d10a      	bne.n	8000d02 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8000cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf0:	f383 8811 	msr	BASEPRI, r3
 8000cf4:	f3bf 8f6f 	isb	sy
 8000cf8:	f3bf 8f4f 	dsb	sy
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000cfe:	bf00      	nop
 8000d00:	e7fe      	b.n	8000d00 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000d02:	f001 fe5b 	bl	80029bc <vPortValidateInterruptPriority>
        __asm volatile
 8000d06:	f3ef 8211 	mrs	r2, BASEPRI
 8000d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d0e:	f383 8811 	msr	BASEPRI, r3
 8000d12:	f3bf 8f6f 	isb	sy
 8000d16:	f3bf 8f4f 	dsb	sy
 8000d1a:	623a      	str	r2, [r7, #32]
 8000d1c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8000d1e:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d03e      	beq.n	8000dac <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8000d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000d3c:	f000 f8cb 	bl	8000ed6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d42:	1e5a      	subs	r2, r3, #1
 8000d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d46:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8000d48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d50:	d112      	bne.n	8000d78 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d025      	beq.n	8000da6 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d5c:	3310      	adds	r3, #16
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fdec 	bl	800193c <xTaskRemoveFromEventList>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d01d      	beq.n	8000da6 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d01a      	beq.n	8000da6 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2201      	movs	r2, #1
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	e016      	b.n	8000da6 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8000d78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d7e:	d10a      	bne.n	8000d96 <xQueueReceiveFromISR+0xee>
        __asm volatile
 8000d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d84:	f383 8811 	msr	BASEPRI, r3
 8000d88:	f3bf 8f6f 	isb	sy
 8000d8c:	f3bf 8f4f 	dsb	sy
 8000d90:	61bb      	str	r3, [r7, #24]
    }
 8000d92:	bf00      	nop
 8000d94:	e7fe      	b.n	8000d94 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8000d96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	b25a      	sxtb	r2, r3
 8000da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8000da6:	2301      	movs	r3, #1
 8000da8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000daa:	e001      	b.n	8000db0 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db2:	617b      	str	r3, [r7, #20]
        __asm volatile
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f383 8811 	msr	BASEPRI, r3
    }
 8000dba:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3740      	adds	r7, #64	; 0x40
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b084      	sub	sp, #16
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10a      	bne.n	8000dea <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8000dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dd8:	f383 8811 	msr	BASEPRI, r3
 8000ddc:	f3bf 8f6f 	isb	sy
 8000de0:	f3bf 8f4f 	dsb	sy
 8000de4:	60bb      	str	r3, [r7, #8]
    }
 8000de6:	bf00      	nop
 8000de8:	e7fe      	b.n	8000de8 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8000dea:	f001 fd05 	bl	80027f8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df2:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8000df4:	f001 fd30 	bl	8002858 <vPortExitCritical>

    return uxReturn;
 8000df8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e16:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d10d      	bne.n	8000e3c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d14d      	bne.n	8000ec4 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 ff95 	bl	8001d5c <xTaskPriorityDisinherit>
 8000e32:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	e043      	b.n	8000ec4 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d119      	bne.n	8000e76 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6858      	ldr	r0, [r3, #4]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68b9      	ldr	r1, [r7, #8]
 8000e4e:	f005 f841 	bl	8005ed4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	441a      	add	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d32b      	bcc.n	8000ec4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	e026      	b.n	8000ec4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	68d8      	ldr	r0, [r3, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	f005 f827 	bl	8005ed4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	68da      	ldr	r2, [r3, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	425b      	negs	r3, r3
 8000e90:	441a      	add	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d207      	bcs.n	8000eb2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	425b      	negs	r3, r3
 8000eac:	441a      	add	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d105      	bne.n	8000ec4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000ecc:	697b      	ldr	r3, [r7, #20]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d018      	beq.n	8000f1a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	441a      	add	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d303      	bcc.n	8000f0a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	68d9      	ldr	r1, [r3, #12]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	461a      	mov	r2, r3
 8000f14:	6838      	ldr	r0, [r7, #0]
 8000f16:	f004 ffdd 	bl	8005ed4 <memcpy>
    }
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b084      	sub	sp, #16
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000f2a:	f001 fc65 	bl	80027f8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f34:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f36:	e011      	b.n	8000f5c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d012      	beq.n	8000f66 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3324      	adds	r3, #36	; 0x24
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 fcf9 	bl	800193c <xTaskRemoveFromEventList>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000f50:	f000 fe46 	bl	8001be0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	dce9      	bgt.n	8000f38 <prvUnlockQueue+0x16>
 8000f64:	e000      	b.n	8000f68 <prvUnlockQueue+0x46>
                        break;
 8000f66:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	22ff      	movs	r2, #255	; 0xff
 8000f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000f70:	f001 fc72 	bl	8002858 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000f74:	f001 fc40 	bl	80027f8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f7e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f80:	e011      	b.n	8000fa6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d012      	beq.n	8000fb0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3310      	adds	r3, #16
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fcd4 	bl	800193c <xTaskRemoveFromEventList>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000f9a:	f000 fe21 	bl	8001be0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	dce9      	bgt.n	8000f82 <prvUnlockQueue+0x60>
 8000fae:	e000      	b.n	8000fb2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000fb0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	22ff      	movs	r2, #255	; 0xff
 8000fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000fba:	f001 fc4d 	bl	8002858 <vPortExitCritical>
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000fce:	f001 fc13 	bl	80027f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d102      	bne.n	8000fe0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	e001      	b.n	8000fe4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000fe4:	f001 fc38 	bl	8002858 <vPortExitCritical>

    return xReturn;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000ffa:	f001 fbfd 	bl	80027f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001006:	429a      	cmp	r2, r3
 8001008:	d102      	bne.n	8001010 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800100a:	2301      	movs	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e001      	b.n	8001014 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001014:	f001 fc20 	bl	8002858 <vPortExitCritical>

    return xReturn;
 8001018:	68fb      	ldr	r3, [r7, #12]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8001022:	b480      	push	{r7}
 8001024:	b087      	sub	sp, #28
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d10a      	bne.n	800104a <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8001034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001038:	f383 8811 	msr	BASEPRI, r3
 800103c:	f3bf 8f6f 	isb	sy
 8001040:	f3bf 8f4f 	dsb	sy
 8001044:	60fb      	str	r3, [r7, #12]
    }
 8001046:	bf00      	nop
 8001048:	e7fe      	b.n	8001048 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001052:	429a      	cmp	r2, r3
 8001054:	d102      	bne.n	800105c <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8001056:	2301      	movs	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	e001      	b.n	8001060 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001060:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001062:	4618      	mov	r0, r3
 8001064:	371c      	adds	r7, #28
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800106e:	b580      	push	{r7, lr}
 8001070:	b08c      	sub	sp, #48	; 0x30
 8001072:	af04      	add	r7, sp, #16
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	4613      	mov	r3, r2
 800107c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4618      	mov	r0, r3
 8001084:	f001 fcda 	bl	8002a3c <pvPortMalloc>
 8001088:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00e      	beq.n	80010ae <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001090:	2058      	movs	r0, #88	; 0x58
 8001092:	f001 fcd3 	bl	8002a3c <pvPortMalloc>
 8001096:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	631a      	str	r2, [r3, #48]	; 0x30
 80010a4:	e005      	b.n	80010b2 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f001 fda8 	bl	8002bfc <vPortFree>
 80010ac:	e001      	b.n	80010b2 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d013      	beq.n	80010e0 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80010b8:	88fa      	ldrh	r2, [r7, #6]
 80010ba:	2300      	movs	r3, #0
 80010bc:	9303      	str	r3, [sp, #12]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f000 f80e 	bl	80010f0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80010d4:	69f8      	ldr	r0, [r7, #28]
 80010d6:	f000 f8af 	bl	8001238 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80010da:	2301      	movs	r3, #1
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	e002      	b.n	80010e6 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
 80010e4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80010e6:	69bb      	ldr	r3, [r7, #24]
    }
 80010e8:	4618      	mov	r0, r3
 80010ea:	3720      	adds	r7, #32
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80010fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001100:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	461a      	mov	r2, r3
 8001108:	21a5      	movs	r1, #165	; 0xa5
 800110a:	f004 fef1 	bl	8005ef0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800110e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001118:	3b01      	subs	r3, #1
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	f023 0307 	bic.w	r3, r3, #7
 8001126:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00a      	beq.n	8001148 <prvInitialiseNewTask+0x58>
        __asm volatile
 8001132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001136:	f383 8811 	msr	BASEPRI, r3
 800113a:	f3bf 8f6f 	isb	sy
 800113e:	f3bf 8f4f 	dsb	sy
 8001142:	617b      	str	r3, [r7, #20]
    }
 8001144:	bf00      	nop
 8001146:	e7fe      	b.n	8001146 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d01f      	beq.n	800118e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	e012      	b.n	800117a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	4413      	add	r3, r2
 800115a:	7819      	ldrb	r1, [r3, #0]
 800115c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	4413      	add	r3, r2
 8001162:	3334      	adds	r3, #52	; 0x34
 8001164:	460a      	mov	r2, r1
 8001166:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d006      	beq.n	8001182 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	3301      	adds	r3, #1
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	2b09      	cmp	r3, #9
 800117e:	d9e9      	bls.n	8001154 <prvInitialiseNewTask+0x64>
 8001180:	e000      	b.n	8001184 <prvInitialiseNewTask+0x94>
            {
                break;
 8001182:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001186:	2200      	movs	r2, #0
 8001188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800118c:	e003      	b.n	8001196 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800118e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001198:	2b04      	cmp	r3, #4
 800119a:	d90a      	bls.n	80011b2 <prvInitialiseNewTask+0xc2>
        __asm volatile
 800119c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a0:	f383 8811 	msr	BASEPRI, r3
 80011a4:	f3bf 8f6f 	isb	sy
 80011a8:	f3bf 8f4f 	dsb	sy
 80011ac:	613b      	str	r3, [r7, #16]
    }
 80011ae:	bf00      	nop
 80011b0:	e7fe      	b.n	80011b0 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80011b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d901      	bls.n	80011bc <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80011b8:	2304      	movs	r3, #4
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80011bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011c0:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80011c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011c6:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80011c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ca:	2200      	movs	r2, #0
 80011cc:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80011ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d0:	3304      	adds	r3, #4
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f99e 	bl	8000514 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80011d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011da:	3318      	adds	r3, #24
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f999 	bl	8000514 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80011e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011e6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ea:	f1c3 0205 	rsb	r2, r3, #5
 80011ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80011f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80011f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011fa:	3350      	adds	r3, #80	; 0x50
 80011fc:	2204      	movs	r2, #4
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f004 fe75 	bl	8005ef0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001208:	3354      	adds	r3, #84	; 0x54
 800120a:	2201      	movs	r2, #1
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f004 fe6e 	bl	8005ef0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	68f9      	ldr	r1, [r7, #12]
 8001218:	69b8      	ldr	r0, [r7, #24]
 800121a:	f001 f9c1 	bl	80025a0 <pxPortInitialiseStack>
 800121e:	4602      	mov	r2, r0
 8001220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001222:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800122a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800122e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001240:	f001 fada 	bl	80027f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001244:	4b40      	ldr	r3, [pc, #256]	; (8001348 <prvAddNewTaskToReadyList+0x110>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	4a3f      	ldr	r2, [pc, #252]	; (8001348 <prvAddNewTaskToReadyList+0x110>)
 800124c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800124e:	4b3f      	ldr	r3, [pc, #252]	; (800134c <prvAddNewTaskToReadyList+0x114>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d109      	bne.n	800126a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001256:	4a3d      	ldr	r2, [pc, #244]	; (800134c <prvAddNewTaskToReadyList+0x114>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800125c:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <prvAddNewTaskToReadyList+0x110>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d110      	bne.n	8001286 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001264:	f000 fce0 	bl	8001c28 <prvInitialiseTaskLists>
 8001268:	e00d      	b.n	8001286 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800126a:	4b39      	ldr	r3, [pc, #228]	; (8001350 <prvAddNewTaskToReadyList+0x118>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d109      	bne.n	8001286 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001272:	4b36      	ldr	r3, [pc, #216]	; (800134c <prvAddNewTaskToReadyList+0x114>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	429a      	cmp	r2, r3
 800127e:	d802      	bhi.n	8001286 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001280:	4a32      	ldr	r2, [pc, #200]	; (800134c <prvAddNewTaskToReadyList+0x114>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001286:	4b33      	ldr	r3, [pc, #204]	; (8001354 <prvAddNewTaskToReadyList+0x11c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	4a31      	ldr	r2, [pc, #196]	; (8001354 <prvAddNewTaskToReadyList+0x11c>)
 800128e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001290:	4b30      	ldr	r3, [pc, #192]	; (8001354 <prvAddNewTaskToReadyList+0x11c>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129c:	2201      	movs	r2, #1
 800129e:	409a      	lsls	r2, r3
 80012a0:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <prvAddNewTaskToReadyList+0x120>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	4a2c      	ldr	r2, [pc, #176]	; (8001358 <prvAddNewTaskToReadyList+0x120>)
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ae:	492b      	ldr	r1, [pc, #172]	; (800135c <prvAddNewTaskToReadyList+0x124>)
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	3304      	adds	r3, #4
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	3204      	adds	r2, #4
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	1d1a      	adds	r2, r3, #4
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4a1b      	ldr	r2, [pc, #108]	; (800135c <prvAddNewTaskToReadyList+0x124>)
 80012ee:	441a      	add	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	615a      	str	r2, [r3, #20]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f8:	4918      	ldr	r1, [pc, #96]	; (800135c <prvAddNewTaskToReadyList+0x124>)
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	1c59      	adds	r1, r3, #1
 8001308:	4814      	ldr	r0, [pc, #80]	; (800135c <prvAddNewTaskToReadyList+0x124>)
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4403      	add	r3, r0
 8001314:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001316:	f001 fa9f 	bl	8002858 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <prvAddNewTaskToReadyList+0x118>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00e      	beq.n	8001340 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <prvAddNewTaskToReadyList+0x114>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132c:	429a      	cmp	r2, r3
 800132e:	d207      	bcs.n	8001340 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <prvAddNewTaskToReadyList+0x128>)
 8001332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	f3bf 8f4f 	dsb	sy
 800133c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	2000010c 	.word	0x2000010c
 800134c:	20000034 	.word	0x20000034
 8001350:	20000118 	.word	0x20000118
 8001354:	20000128 	.word	0x20000128
 8001358:	20000114 	.word	0x20000114
 800135c:	20000038 	.word	0x20000038
 8001360:	e000ed04 	.word	0xe000ed04

08001364 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <vTaskStartScheduler+0x7c>)
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	2300      	movs	r3, #0
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2300      	movs	r3, #0
 8001374:	2282      	movs	r2, #130	; 0x82
 8001376:	491b      	ldr	r1, [pc, #108]	; (80013e4 <vTaskStartScheduler+0x80>)
 8001378:	481b      	ldr	r0, [pc, #108]	; (80013e8 <vTaskStartScheduler+0x84>)
 800137a:	f7ff fe78 	bl	800106e <xTaskCreate>
 800137e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d116      	bne.n	80013b4 <vTaskStartScheduler+0x50>
        __asm volatile
 8001386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800138a:	f383 8811 	msr	BASEPRI, r3
 800138e:	f3bf 8f6f 	isb	sy
 8001392:	f3bf 8f4f 	dsb	sy
 8001396:	60bb      	str	r3, [r7, #8]
    }
 8001398:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <vTaskStartScheduler+0x88>)
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <vTaskStartScheduler+0x8c>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <vTaskStartScheduler+0x90>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80013ae:	f001 f981 	bl	80026b4 <xPortStartScheduler>
 80013b2:	e00e      	b.n	80013d2 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ba:	d10a      	bne.n	80013d2 <vTaskStartScheduler+0x6e>
        __asm volatile
 80013bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013c0:	f383 8811 	msr	BASEPRI, r3
 80013c4:	f3bf 8f6f 	isb	sy
 80013c8:	f3bf 8f4f 	dsb	sy
 80013cc:	607b      	str	r3, [r7, #4]
    }
 80013ce:	bf00      	nop
 80013d0:	e7fe      	b.n	80013d0 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <vTaskStartScheduler+0x94>)
 80013d4:	681b      	ldr	r3, [r3, #0]
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000130 	.word	0x20000130
 80013e4:	08005f18 	.word	0x08005f18
 80013e8:	08001bf9 	.word	0x08001bf9
 80013ec:	2000012c 	.word	0x2000012c
 80013f0:	20000118 	.word	0x20000118
 80013f4:	20000110 	.word	0x20000110
 80013f8:	20000000 	.word	0x20000000

080013fc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <vTaskSuspendAll+0x18>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	4a03      	ldr	r2, [pc, #12]	; (8001414 <vTaskSuspendAll+0x18>)
 8001408:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	20000134 	.word	0x20000134

08001418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001426:	4b71      	ldr	r3, [pc, #452]	; (80015ec <xTaskResumeAll+0x1d4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10a      	bne.n	8001444 <xTaskResumeAll+0x2c>
        __asm volatile
 800142e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001432:	f383 8811 	msr	BASEPRI, r3
 8001436:	f3bf 8f6f 	isb	sy
 800143a:	f3bf 8f4f 	dsb	sy
 800143e:	607b      	str	r3, [r7, #4]
    }
 8001440:	bf00      	nop
 8001442:	e7fe      	b.n	8001442 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001444:	f001 f9d8 	bl	80027f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001448:	4b68      	ldr	r3, [pc, #416]	; (80015ec <xTaskResumeAll+0x1d4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3b01      	subs	r3, #1
 800144e:	4a67      	ldr	r2, [pc, #412]	; (80015ec <xTaskResumeAll+0x1d4>)
 8001450:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001452:	4b66      	ldr	r3, [pc, #408]	; (80015ec <xTaskResumeAll+0x1d4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 80c0 	bne.w	80015dc <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800145c:	4b64      	ldr	r3, [pc, #400]	; (80015f0 <xTaskResumeAll+0x1d8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 80bb 	beq.w	80015dc <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001466:	e08a      	b.n	800157e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001468:	4b62      	ldr	r3, [pc, #392]	; (80015f4 <xTaskResumeAll+0x1dc>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	6a12      	ldr	r2, [r2, #32]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	69fa      	ldr	r2, [r7, #28]
 8001486:	69d2      	ldr	r2, [r2, #28]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3318      	adds	r3, #24
 8001492:	429a      	cmp	r2, r3
 8001494:	d103      	bne.n	800149e <xTaskResumeAll+0x86>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	6a1a      	ldr	r2, [r3, #32]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	2200      	movs	r2, #0
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	1e5a      	subs	r2, r3, #1
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	69fa      	ldr	r2, [r7, #28]
 80014ba:	68d2      	ldr	r2, [r2, #12]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	69fa      	ldr	r2, [r7, #28]
 80014c4:	6892      	ldr	r2, [r2, #8]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	3304      	adds	r3, #4
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d103      	bne.n	80014dc <xTaskResumeAll+0xc4>
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	1e5a      	subs	r2, r3, #1
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	2201      	movs	r2, #1
 80014f2:	409a      	lsls	r2, r3
 80014f4:	4b40      	ldr	r3, [pc, #256]	; (80015f8 <xTaskResumeAll+0x1e0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	4a3f      	ldr	r2, [pc, #252]	; (80015f8 <xTaskResumeAll+0x1e0>)
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001502:	493e      	ldr	r1, [pc, #248]	; (80015fc <xTaskResumeAll+0x1e4>)
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	440b      	add	r3, r1
 800150e:	3304      	adds	r3, #4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	3204      	adds	r2, #4
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	1d1a      	adds	r2, r3, #4
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4a2e      	ldr	r2, [pc, #184]	; (80015fc <xTaskResumeAll+0x1e4>)
 8001542:	441a      	add	r2, r3
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	615a      	str	r2, [r3, #20]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800154c:	492b      	ldr	r1, [pc, #172]	; (80015fc <xTaskResumeAll+0x1e4>)
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	1c59      	adds	r1, r3, #1
 800155c:	4827      	ldr	r0, [pc, #156]	; (80015fc <xTaskResumeAll+0x1e4>)
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4403      	add	r3, r0
 8001568:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800156e:	4b24      	ldr	r3, [pc, #144]	; (8001600 <xTaskResumeAll+0x1e8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001574:	429a      	cmp	r2, r3
 8001576:	d302      	bcc.n	800157e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <xTaskResumeAll+0x1ec>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800157e:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <xTaskResumeAll+0x1dc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f47f af70 	bne.w	8001468 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800158e:	f000 fbc9 	bl	8001d24 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <xTaskResumeAll+0x1f0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d010      	beq.n	80015c0 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800159e:	f000 f837 	bl	8001610 <xTaskIncrementTick>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <xTaskResumeAll+0x1ec>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f1      	bne.n	800159e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <xTaskResumeAll+0x1f0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80015c0:	4b10      	ldr	r3, [pc, #64]	; (8001604 <xTaskResumeAll+0x1ec>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d009      	beq.n	80015dc <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80015c8:	2301      	movs	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <xTaskResumeAll+0x1f4>)
 80015ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	f3bf 8f4f 	dsb	sy
 80015d8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80015dc:	f001 f93c 	bl	8002858 <vPortExitCritical>

    return xAlreadyYielded;
 80015e0:	69bb      	ldr	r3, [r7, #24]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000134 	.word	0x20000134
 80015f0:	2000010c 	.word	0x2000010c
 80015f4:	200000cc 	.word	0x200000cc
 80015f8:	20000114 	.word	0x20000114
 80015fc:	20000038 	.word	0x20000038
 8001600:	20000034 	.word	0x20000034
 8001604:	20000120 	.word	0x20000120
 8001608:	2000011c 	.word	0x2000011c
 800160c:	e000ed04 	.word	0xe000ed04

08001610 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800161a:	4b7d      	ldr	r3, [pc, #500]	; (8001810 <xTaskIncrementTick+0x200>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f040 80ec 	bne.w	80017fc <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001624:	4b7b      	ldr	r3, [pc, #492]	; (8001814 <xTaskIncrementTick+0x204>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800162c:	4a79      	ldr	r2, [pc, #484]	; (8001814 <xTaskIncrementTick+0x204>)
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d120      	bne.n	800167a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001638:	4b77      	ldr	r3, [pc, #476]	; (8001818 <xTaskIncrementTick+0x208>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00a      	beq.n	8001658 <xTaskIncrementTick+0x48>
        __asm volatile
 8001642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001646:	f383 8811 	msr	BASEPRI, r3
 800164a:	f3bf 8f6f 	isb	sy
 800164e:	f3bf 8f4f 	dsb	sy
 8001652:	607b      	str	r3, [r7, #4]
    }
 8001654:	bf00      	nop
 8001656:	e7fe      	b.n	8001656 <xTaskIncrementTick+0x46>
 8001658:	4b6f      	ldr	r3, [pc, #444]	; (8001818 <xTaskIncrementTick+0x208>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	4b6f      	ldr	r3, [pc, #444]	; (800181c <xTaskIncrementTick+0x20c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a6d      	ldr	r2, [pc, #436]	; (8001818 <xTaskIncrementTick+0x208>)
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4a6d      	ldr	r2, [pc, #436]	; (800181c <xTaskIncrementTick+0x20c>)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b6c      	ldr	r3, [pc, #432]	; (8001820 <xTaskIncrementTick+0x210>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	4a6b      	ldr	r2, [pc, #428]	; (8001820 <xTaskIncrementTick+0x210>)
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	f000 fb55 	bl	8001d24 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800167a:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <xTaskIncrementTick+0x214>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6a3a      	ldr	r2, [r7, #32]
 8001680:	429a      	cmp	r2, r3
 8001682:	f0c0 80a6 	bcc.w	80017d2 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001686:	4b64      	ldr	r3, [pc, #400]	; (8001818 <xTaskIncrementTick+0x208>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d104      	bne.n	800169a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001690:	4b64      	ldr	r3, [pc, #400]	; (8001824 <xTaskIncrementTick+0x214>)
 8001692:	f04f 32ff 	mov.w	r2, #4294967295
 8001696:	601a      	str	r2, [r3, #0]
                    break;
 8001698:	e09b      	b.n	80017d2 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800169a:	4b5f      	ldr	r3, [pc, #380]	; (8001818 <xTaskIncrementTick+0x208>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80016aa:	6a3a      	ldr	r2, [r7, #32]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d203      	bcs.n	80016ba <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80016b2:	4a5c      	ldr	r2, [pc, #368]	; (8001824 <xTaskIncrementTick+0x214>)
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80016b8:	e08b      	b.n	80017d2 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	68d2      	ldr	r2, [r2, #12]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	6892      	ldr	r2, [r2, #8]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	3304      	adds	r3, #4
 80016dc:	429a      	cmp	r2, r3
 80016de:	d103      	bne.n	80016e8 <xTaskIncrementTick+0xd8>
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	2200      	movs	r2, #0
 80016ec:	615a      	str	r2, [r3, #20]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	1e5a      	subs	r2, r3, #1
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d01e      	beq.n	800173e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	6a12      	ldr	r2, [r2, #32]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	69d2      	ldr	r2, [r2, #28]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	3318      	adds	r3, #24
 8001722:	429a      	cmp	r2, r3
 8001724:	d103      	bne.n	800172e <xTaskIncrementTick+0x11e>
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	6a1a      	ldr	r2, [r3, #32]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2200      	movs	r2, #0
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	1e5a      	subs	r2, r3, #1
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	2201      	movs	r2, #1
 8001744:	409a      	lsls	r2, r3
 8001746:	4b38      	ldr	r3, [pc, #224]	; (8001828 <xTaskIncrementTick+0x218>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4313      	orrs	r3, r2
 800174c:	4a36      	ldr	r2, [pc, #216]	; (8001828 <xTaskIncrementTick+0x218>)
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001754:	4935      	ldr	r1, [pc, #212]	; (800182c <xTaskIncrementTick+0x21c>)
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	3304      	adds	r3, #4
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	3204      	adds	r2, #4
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	1d1a      	adds	r2, r3, #4
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4a26      	ldr	r2, [pc, #152]	; (800182c <xTaskIncrementTick+0x21c>)
 8001794:	441a      	add	r2, r3
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	615a      	str	r2, [r3, #20]
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800179e:	4923      	ldr	r1, [pc, #140]	; (800182c <xTaskIncrementTick+0x21c>)
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	1c59      	adds	r1, r3, #1
 80017ae:	481f      	ldr	r0, [pc, #124]	; (800182c <xTaskIncrementTick+0x21c>)
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4403      	add	r3, r0
 80017ba:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <xTaskIncrementTick+0x220>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	429a      	cmp	r2, r3
 80017c8:	f4ff af5d 	bcc.w	8001686 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80017cc:	2301      	movs	r3, #1
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017d0:	e759      	b.n	8001686 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80017d2:	4b17      	ldr	r3, [pc, #92]	; (8001830 <xTaskIncrementTick+0x220>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d8:	4914      	ldr	r1, [pc, #80]	; (800182c <xTaskIncrementTick+0x21c>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d901      	bls.n	80017ee <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 80017ea:	2301      	movs	r3, #1
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <xTaskIncrementTick+0x224>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d007      	beq.n	8001806 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 80017f6:	2301      	movs	r3, #1
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
 80017fa:	e004      	b.n	8001806 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <xTaskIncrementTick+0x228>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <xTaskIncrementTick+0x228>)
 8001804:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001808:	4618      	mov	r0, r3
 800180a:	3728      	adds	r7, #40	; 0x28
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000134 	.word	0x20000134
 8001814:	20000110 	.word	0x20000110
 8001818:	200000c4 	.word	0x200000c4
 800181c:	200000c8 	.word	0x200000c8
 8001820:	20000124 	.word	0x20000124
 8001824:	2000012c 	.word	0x2000012c
 8001828:	20000114 	.word	0x20000114
 800182c:	20000038 	.word	0x20000038
 8001830:	20000034 	.word	0x20000034
 8001834:	20000120 	.word	0x20000120
 8001838:	2000011c 	.word	0x2000011c

0800183c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001842:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <vTaskSwitchContext+0xa4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800184a:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <vTaskSwitchContext+0xa8>)
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001850:	e03f      	b.n	80018d2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8001852:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <vTaskSwitchContext+0xa8>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <vTaskSwitchContext+0xac>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	fab3 f383 	clz	r3, r3
 8001864:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001866:	7afb      	ldrb	r3, [r7, #11]
 8001868:	f1c3 031f 	rsb	r3, r3, #31
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	491f      	ldr	r1, [pc, #124]	; (80018ec <vTaskSwitchContext+0xb0>)
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10a      	bne.n	8001898 <vTaskSwitchContext+0x5c>
        __asm volatile
 8001882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001886:	f383 8811 	msr	BASEPRI, r3
 800188a:	f3bf 8f6f 	isb	sy
 800188e:	f3bf 8f4f 	dsb	sy
 8001892:	607b      	str	r3, [r7, #4]
    }
 8001894:	bf00      	nop
 8001896:	e7fe      	b.n	8001896 <vTaskSwitchContext+0x5a>
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <vTaskSwitchContext+0xb0>)
 80018a4:	4413      	add	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	3308      	adds	r3, #8
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d104      	bne.n	80018c8 <vTaskSwitchContext+0x8c>
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <vTaskSwitchContext+0xb4>)
 80018d0:	6013      	str	r3, [r2, #0]
}
 80018d2:	bf00      	nop
 80018d4:	371c      	adds	r7, #28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000134 	.word	0x20000134
 80018e4:	20000120 	.word	0x20000120
 80018e8:	20000114 	.word	0x20000114
 80018ec:	20000038 	.word	0x20000038
 80018f0:	20000034 	.word	0x20000034

080018f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10a      	bne.n	800191a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001908:	f383 8811 	msr	BASEPRI, r3
 800190c:	f3bf 8f6f 	isb	sy
 8001910:	f3bf 8f4f 	dsb	sy
 8001914:	60fb      	str	r3, [r7, #12]
    }
 8001916:	bf00      	nop
 8001918:	e7fe      	b.n	8001918 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <vTaskPlaceOnEventList+0x44>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	3318      	adds	r3, #24
 8001920:	4619      	mov	r1, r3
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7fe fe03 	bl	800052e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001928:	2101      	movs	r1, #1
 800192a:	6838      	ldr	r0, [r7, #0]
 800192c:	f000 fdb8 	bl	80024a0 <prvAddCurrentTaskToDelayedList>
}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000034 	.word	0x20000034

0800193c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800193c:	b480      	push	{r7}
 800193e:	b08b      	sub	sp, #44	; 0x2c
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10a      	bne.n	8001968 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001956:	f383 8811 	msr	BASEPRI, r3
 800195a:	f3bf 8f6f 	isb	sy
 800195e:	f3bf 8f4f 	dsb	sy
 8001962:	60fb      	str	r3, [r7, #12]
    }
 8001964:	bf00      	nop
 8001966:	e7fe      	b.n	8001966 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	6a3a      	ldr	r2, [r7, #32]
 8001974:	6a12      	ldr	r2, [r2, #32]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	6a3a      	ldr	r2, [r7, #32]
 800197e:	69d2      	ldr	r2, [r2, #28]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	3318      	adds	r3, #24
 800198a:	429a      	cmp	r2, r3
 800198c:	d103      	bne.n	8001996 <xTaskRemoveFromEventList+0x5a>
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	6a1a      	ldr	r2, [r3, #32]
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	2200      	movs	r2, #0
 800199a:	629a      	str	r2, [r3, #40]	; 0x28
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	1e5a      	subs	r2, r3, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019a6:	4b4a      	ldr	r3, [pc, #296]	; (8001ad0 <xTaskRemoveFromEventList+0x194>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d15e      	bne.n	8001a6c <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80019ae:	6a3b      	ldr	r3, [r7, #32]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	6a3a      	ldr	r2, [r7, #32]
 80019ba:	68d2      	ldr	r2, [r2, #12]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	6a3a      	ldr	r2, [r7, #32]
 80019c4:	6892      	ldr	r2, [r2, #8]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	3304      	adds	r3, #4
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d103      	bne.n	80019dc <xTaskRemoveFromEventList+0xa0>
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	2200      	movs	r2, #0
 80019e0:	615a      	str	r2, [r3, #20]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	1e5a      	subs	r2, r3, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	2201      	movs	r2, #1
 80019f2:	409a      	lsls	r2, r3
 80019f4:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <xTaskRemoveFromEventList+0x198>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	4a36      	ldr	r2, [pc, #216]	; (8001ad4 <xTaskRemoveFromEventList+0x198>)
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a02:	4935      	ldr	r1, [pc, #212]	; (8001ad8 <xTaskRemoveFromEventList+0x19c>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3304      	adds	r3, #4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	6a3a      	ldr	r2, [r7, #32]
 8001a28:	3204      	adds	r2, #4
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	1d1a      	adds	r2, r3, #4
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4a25      	ldr	r2, [pc, #148]	; (8001ad8 <xTaskRemoveFromEventList+0x19c>)
 8001a42:	441a      	add	r2, r3
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	615a      	str	r2, [r3, #20]
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a4c:	4922      	ldr	r1, [pc, #136]	; (8001ad8 <xTaskRemoveFromEventList+0x19c>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	1c59      	adds	r1, r3, #1
 8001a5c:	481e      	ldr	r0, [pc, #120]	; (8001ad8 <xTaskRemoveFromEventList+0x19c>)
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4403      	add	r3, r0
 8001a68:	6019      	str	r1, [r3, #0]
 8001a6a:	e01b      	b.n	8001aa4 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <xTaskRemoveFromEventList+0x1a0>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	61da      	str	r2, [r3, #28]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	621a      	str	r2, [r3, #32]
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	6a3a      	ldr	r2, [r7, #32]
 8001a86:	3218      	adds	r2, #24
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	f103 0218 	add.w	r2, r3, #24
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	4a11      	ldr	r2, [pc, #68]	; (8001adc <xTaskRemoveFromEventList+0x1a0>)
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <xTaskRemoveFromEventList+0x1a0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <xTaskRemoveFromEventList+0x1a0>)
 8001aa2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <xTaskRemoveFromEventList+0x1a4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d905      	bls.n	8001abe <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <xTaskRemoveFromEventList+0x1a8>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	e001      	b.n	8001ac2 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	372c      	adds	r7, #44	; 0x2c
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	20000134 	.word	0x20000134
 8001ad4:	20000114 	.word	0x20000114
 8001ad8:	20000038 	.word	0x20000038
 8001adc:	200000cc 	.word	0x200000cc
 8001ae0:	20000034 	.word	0x20000034
 8001ae4:	20000120 	.word	0x20000120

08001ae8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <vTaskInternalSetTimeOutState+0x24>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <vTaskInternalSetTimeOutState+0x28>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	605a      	str	r2, [r3, #4]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	20000124 	.word	0x20000124
 8001b10:	20000110 	.word	0x20000110

08001b14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10a      	bne.n	8001b3a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b28:	f383 8811 	msr	BASEPRI, r3
 8001b2c:	f3bf 8f6f 	isb	sy
 8001b30:	f3bf 8f4f 	dsb	sy
 8001b34:	613b      	str	r3, [r7, #16]
    }
 8001b36:	bf00      	nop
 8001b38:	e7fe      	b.n	8001b38 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10a      	bne.n	8001b56 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b44:	f383 8811 	msr	BASEPRI, r3
 8001b48:	f3bf 8f6f 	isb	sy
 8001b4c:	f3bf 8f4f 	dsb	sy
 8001b50:	60fb      	str	r3, [r7, #12]
    }
 8001b52:	bf00      	nop
 8001b54:	e7fe      	b.n	8001b54 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001b56:	f000 fe4f 	bl	80027f8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <xTaskCheckForTimeOut+0xc4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b72:	d102      	bne.n	8001b7a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	e026      	b.n	8001bc8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <xTaskCheckForTimeOut+0xc8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d00a      	beq.n	8001b9c <xTaskCheckForTimeOut+0x88>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d305      	bcc.n	8001b9c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001b90:	2301      	movs	r3, #1
 8001b92:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	e015      	b.n	8001bc8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d20b      	bcs.n	8001bbe <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	1ad2      	subs	r2, r2, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff98 	bl	8001ae8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
 8001bbc:	e004      	b.n	8001bc8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001bc8:	f000 fe46 	bl	8002858 <vPortExitCritical>

    return xReturn;
 8001bcc:	69fb      	ldr	r3, [r7, #28]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3720      	adds	r7, #32
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000110 	.word	0x20000110
 8001bdc:	20000124 	.word	0x20000124

08001be0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <vTaskMissedYield+0x14>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	20000120 	.word	0x20000120

08001bf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001c00:	f000 f852 	bl	8001ca8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <prvIdleTask+0x28>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d9f9      	bls.n	8001c00 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <prvIdleTask+0x2c>)
 8001c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	f3bf 8f4f 	dsb	sy
 8001c18:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001c1c:	e7f0      	b.n	8001c00 <prvIdleTask+0x8>
 8001c1e:	bf00      	nop
 8001c20:	20000038 	.word	0x20000038
 8001c24:	e000ed04 	.word	0xe000ed04

08001c28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	e00c      	b.n	8001c4e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <prvInitialiseTaskLists+0x60>)
 8001c40:	4413      	add	r3, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc46 	bl	80004d4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d9ef      	bls.n	8001c34 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001c54:	480d      	ldr	r0, [pc, #52]	; (8001c8c <prvInitialiseTaskLists+0x64>)
 8001c56:	f7fe fc3d 	bl	80004d4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001c5a:	480d      	ldr	r0, [pc, #52]	; (8001c90 <prvInitialiseTaskLists+0x68>)
 8001c5c:	f7fe fc3a 	bl	80004d4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001c60:	480c      	ldr	r0, [pc, #48]	; (8001c94 <prvInitialiseTaskLists+0x6c>)
 8001c62:	f7fe fc37 	bl	80004d4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001c66:	480c      	ldr	r0, [pc, #48]	; (8001c98 <prvInitialiseTaskLists+0x70>)
 8001c68:	f7fe fc34 	bl	80004d4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001c6c:	480b      	ldr	r0, [pc, #44]	; (8001c9c <prvInitialiseTaskLists+0x74>)
 8001c6e:	f7fe fc31 	bl	80004d4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <prvInitialiseTaskLists+0x78>)
 8001c74:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <prvInitialiseTaskLists+0x64>)
 8001c76:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <prvInitialiseTaskLists+0x7c>)
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <prvInitialiseTaskLists+0x68>)
 8001c7c:	601a      	str	r2, [r3, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000038 	.word	0x20000038
 8001c8c:	2000009c 	.word	0x2000009c
 8001c90:	200000b0 	.word	0x200000b0
 8001c94:	200000cc 	.word	0x200000cc
 8001c98:	200000e0 	.word	0x200000e0
 8001c9c:	200000f8 	.word	0x200000f8
 8001ca0:	200000c4 	.word	0x200000c4
 8001ca4:	200000c8 	.word	0x200000c8

08001ca8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001cae:	e019      	b.n	8001ce4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001cb0:	f000 fda2 	bl	80027f8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cb4:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <prvCheckTasksWaitingTermination+0x50>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fc6d 	bl	80005a0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <prvCheckTasksWaitingTermination+0x54>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <prvCheckTasksWaitingTermination+0x54>)
 8001cce:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <prvCheckTasksWaitingTermination+0x58>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <prvCheckTasksWaitingTermination+0x58>)
 8001cd8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001cda:	f000 fdbd 	bl	8002858 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f810 	bl	8001d04 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <prvCheckTasksWaitingTermination+0x58>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1e1      	bne.n	8001cb0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200000e0 	.word	0x200000e0
 8001cfc:	2000010c 	.word	0x2000010c
 8001d00:	200000f4 	.word	0x200000f4

08001d04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 ff73 	bl	8002bfc <vPortFree>
                vPortFree( pxTCB );
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 ff70 	bl	8002bfc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <prvResetNextTaskUnblockTime+0x30>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d104      	bne.n	8001d3c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <prvResetNextTaskUnblockTime+0x34>)
 8001d34:	f04f 32ff 	mov.w	r2, #4294967295
 8001d38:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001d3a:	e005      	b.n	8001d48 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <prvResetNextTaskUnblockTime+0x30>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <prvResetNextTaskUnblockTime+0x34>)
 8001d46:	6013      	str	r3, [r2, #0]
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	200000c4 	.word	0x200000c4
 8001d58:	2000012c 	.word	0x2000012c

08001d5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 808c 	beq.w	8001e8c <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001d74:	4b48      	ldr	r3, [pc, #288]	; (8001e98 <xTaskPriorityDisinherit+0x13c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d00a      	beq.n	8001d94 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8001d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d82:	f383 8811 	msr	BASEPRI, r3
 8001d86:	f3bf 8f6f 	isb	sy
 8001d8a:	f3bf 8f4f 	dsb	sy
 8001d8e:	613b      	str	r3, [r7, #16]
    }
 8001d90:	bf00      	nop
 8001d92:	e7fe      	b.n	8001d92 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10a      	bne.n	8001db2 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8001d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da0:	f383 8811 	msr	BASEPRI, r3
 8001da4:	f3bf 8f6f 	isb	sy
 8001da8:	f3bf 8f4f 	dsb	sy
 8001dac:	60fb      	str	r3, [r7, #12]
    }
 8001dae:	bf00      	nop
 8001db0:	e7fe      	b.n	8001db0 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	1e5a      	subs	r2, r3, #1
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d061      	beq.n	8001e8c <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d15d      	bne.n	8001e8c <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fbe3 	bl	80005a0 <uxListRemove>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10a      	bne.n	8001df6 <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	2201      	movs	r2, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <xTaskPriorityDisinherit+0x140>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4013      	ands	r3, r2
 8001df2:	4a2a      	ldr	r2, [pc, #168]	; (8001e9c <xTaskPriorityDisinherit+0x140>)
 8001df4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	f1c3 0205 	rsb	r2, r3, #5
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	2201      	movs	r2, #1
 8001e10:	409a      	lsls	r2, r3
 8001e12:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <xTaskPriorityDisinherit+0x140>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	4a20      	ldr	r2, [pc, #128]	; (8001e9c <xTaskPriorityDisinherit+0x140>)
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e20:	491f      	ldr	r1, [pc, #124]	; (8001ea0 <xTaskPriorityDisinherit+0x144>)
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	60da      	str	r2, [r3, #12]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	3204      	adds	r2, #4
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	1d1a      	adds	r2, r3, #4
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <xTaskPriorityDisinherit+0x144>)
 8001e60:	441a      	add	r2, r3
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	615a      	str	r2, [r3, #20]
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6a:	490d      	ldr	r1, [pc, #52]	; (8001ea0 <xTaskPriorityDisinherit+0x144>)
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	1c59      	adds	r1, r3, #1
 8001e7a:	4809      	ldr	r0, [pc, #36]	; (8001ea0 <xTaskPriorityDisinherit+0x144>)
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4403      	add	r3, r0
 8001e86:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
    }
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3720      	adds	r7, #32
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000034 	.word	0x20000034
 8001e9c:	20000114 	.word	0x20000114
 8001ea0:	20000038 	.word	0x20000038

08001ea4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8001eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ebc:	f383 8811 	msr	BASEPRI, r3
 8001ec0:	f3bf 8f6f 	isb	sy
 8001ec4:	f3bf 8f4f 	dsb	sy
 8001ec8:	613b      	str	r3, [r7, #16]
    }
 8001eca:	bf00      	nop
 8001ecc:	e7fe      	b.n	8001ecc <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8001ece:	f000 fc93 	bl	80027f8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001ed2:	4b32      	ldr	r3, [pc, #200]	; (8001f9c <xTaskGenericNotifyWait+0xf8>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4413      	add	r3, r2
 8001eda:	3354      	adds	r3, #84	; 0x54
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d022      	beq.n	8001f2a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001ee4:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <xTaskGenericNotifyWait+0xf8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	3214      	adds	r2, #20
 8001eec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	43d2      	mvns	r2, r2
 8001ef4:	4011      	ands	r1, r2
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	3214      	adds	r2, #20
 8001efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001efe:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <xTaskGenericNotifyWait+0xf8>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4413      	add	r3, r2
 8001f06:	3354      	adds	r3, #84	; 0x54
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00b      	beq.n	8001f2a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001f12:	2101      	movs	r1, #1
 8001f14:	6a38      	ldr	r0, [r7, #32]
 8001f16:	f000 fac3 	bl	80024a0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001f1a:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <xTaskGenericNotifyWait+0xfc>)
 8001f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	f3bf 8f4f 	dsb	sy
 8001f26:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001f2a:	f000 fc95 	bl	8002858 <vPortExitCritical>

        taskENTER_CRITICAL();
 8001f2e:	f000 fc63 	bl	80027f8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001f38:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <xTaskGenericNotifyWait+0xf8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	3214      	adds	r2, #20
 8001f40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <xTaskGenericNotifyWait+0xf8>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	3354      	adds	r3, #84	; 0x54
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d002      	beq.n	8001f60 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	e00e      	b.n	8001f7e <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <xTaskGenericNotifyWait+0xf8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	3214      	adds	r2, #20
 8001f68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	43d2      	mvns	r2, r2
 8001f70:	4011      	ands	r1, r2
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	3214      	adds	r2, #20
 8001f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <xTaskGenericNotifyWait+0xf8>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4413      	add	r3, r2
 8001f86:	3354      	adds	r3, #84	; 0x54
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001f8c:	f000 fc64 	bl	8002858 <vPortExitCritical>

        return xReturn;
 8001f90:	697b      	ldr	r3, [r7, #20]
    }
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000034 	.word	0x20000034
 8001fa0:	e000ed04 	.word	0xe000ed04

08001fa4 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08e      	sub	sp, #56	; 0x38
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00a      	beq.n	8001fd2 <xTaskGenericNotify+0x2e>
        __asm volatile
 8001fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc0:	f383 8811 	msr	BASEPRI, r3
 8001fc4:	f3bf 8f6f 	isb	sy
 8001fc8:	f3bf 8f4f 	dsb	sy
 8001fcc:	623b      	str	r3, [r7, #32]
    }
 8001fce:	bf00      	nop
 8001fd0:	e7fe      	b.n	8001fd0 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10a      	bne.n	8001fee <xTaskGenericNotify+0x4a>
        __asm volatile
 8001fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fdc:	f383 8811 	msr	BASEPRI, r3
 8001fe0:	f3bf 8f6f 	isb	sy
 8001fe4:	f3bf 8f4f 	dsb	sy
 8001fe8:	61fb      	str	r3, [r7, #28]
    }
 8001fea:	bf00      	nop
 8001fec:	e7fe      	b.n	8001fec <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8001ff2:	f000 fc01 	bl	80027f8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8001ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	3214      	adds	r2, #20
 8002002:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002008:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800200a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4413      	add	r3, r2
 8002010:	3354      	adds	r3, #84	; 0x54
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	4413      	add	r3, r2
 800201e:	3354      	adds	r3, #84	; 0x54
 8002020:	2202      	movs	r2, #2
 8002022:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	2b04      	cmp	r3, #4
 8002028:	d83b      	bhi.n	80020a2 <xTaskGenericNotify+0xfe>
 800202a:	a201      	add	r2, pc, #4	; (adr r2, 8002030 <xTaskGenericNotify+0x8c>)
 800202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002030:	080020c1 	.word	0x080020c1
 8002034:	08002045 	.word	0x08002045
 8002038:	08002061 	.word	0x08002061
 800203c:	08002079 	.word	0x08002079
 8002040:	08002087 	.word	0x08002087
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	3214      	adds	r2, #20
 800204a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	ea42 0103 	orr.w	r1, r2, r3
 8002054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	3214      	adds	r2, #20
 800205a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800205e:	e032      	b.n	80020c6 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	3214      	adds	r2, #20
 8002066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206a:	1c59      	adds	r1, r3, #1
 800206c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	3214      	adds	r2, #20
 8002072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002076:	e026      	b.n	80020c6 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	3214      	adds	r2, #20
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002084:	e01f      	b.n	80020c6 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800208a:	2b02      	cmp	r3, #2
 800208c:	d006      	beq.n	800209c <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	3214      	adds	r2, #20
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800209a:	e014      	b.n	80020c6 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 800209c:	2300      	movs	r3, #0
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80020a0:	e011      	b.n	80020c6 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80020a2:	4b4c      	ldr	r3, [pc, #304]	; (80021d4 <xTaskGenericNotify+0x230>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00c      	beq.n	80020c4 <xTaskGenericNotify+0x120>
        __asm volatile
 80020aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ae:	f383 8811 	msr	BASEPRI, r3
 80020b2:	f3bf 8f6f 	isb	sy
 80020b6:	f3bf 8f4f 	dsb	sy
 80020ba:	61bb      	str	r3, [r7, #24]
    }
 80020bc:	bf00      	nop
 80020be:	e7fe      	b.n	80020be <xTaskGenericNotify+0x11a>
                    break;
 80020c0:	bf00      	nop
 80020c2:	e000      	b.n	80020c6 <xTaskGenericNotify+0x122>

                    break;
 80020c4:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80020c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d17b      	bne.n	80021c6 <xTaskGenericNotify+0x222>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80020ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80020d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020da:	68d2      	ldr	r2, [r2, #12]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020e4:	6892      	ldr	r2, [r2, #8]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ee:	3304      	adds	r3, #4
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d103      	bne.n	80020fc <xTaskGenericNotify+0x158>
 80020f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fe:	2200      	movs	r2, #0
 8002100:	615a      	str	r2, [r3, #20]
 8002102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	1e5a      	subs	r2, r3, #1
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210a:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800210c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	2201      	movs	r2, #1
 8002112:	409a      	lsls	r2, r3
 8002114:	4b30      	ldr	r3, [pc, #192]	; (80021d8 <xTaskGenericNotify+0x234>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4313      	orrs	r3, r2
 800211a:	4a2f      	ldr	r2, [pc, #188]	; (80021d8 <xTaskGenericNotify+0x234>)
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002122:	492e      	ldr	r1, [pc, #184]	; (80021dc <xTaskGenericNotify+0x238>)
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	3304      	adds	r3, #4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
 8002134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002148:	3204      	adds	r2, #4
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214e:	1d1a      	adds	r2, r3, #4
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4a1e      	ldr	r2, [pc, #120]	; (80021dc <xTaskGenericNotify+0x238>)
 8002162:	441a      	add	r2, r3
 8002164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002166:	615a      	str	r2, [r3, #20]
 8002168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800216c:	491b      	ldr	r1, [pc, #108]	; (80021dc <xTaskGenericNotify+0x238>)
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	1c59      	adds	r1, r3, #1
 800217c:	4817      	ldr	r0, [pc, #92]	; (80021dc <xTaskGenericNotify+0x238>)
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4403      	add	r3, r0
 8002188:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <xTaskGenericNotify+0x204>
        __asm volatile
 8002192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002196:	f383 8811 	msr	BASEPRI, r3
 800219a:	f3bf 8f6f 	isb	sy
 800219e:	f3bf 8f4f 	dsb	sy
 80021a2:	617b      	str	r3, [r7, #20]
    }
 80021a4:	bf00      	nop
 80021a6:	e7fe      	b.n	80021a6 <xTaskGenericNotify+0x202>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80021a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <xTaskGenericNotify+0x23c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d907      	bls.n	80021c6 <xTaskGenericNotify+0x222>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <xTaskGenericNotify+0x240>)
 80021b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	f3bf 8f4f 	dsb	sy
 80021c2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80021c6:	f000 fb47 	bl	8002858 <vPortExitCritical>

        return xReturn;
 80021ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80021cc:	4618      	mov	r0, r3
 80021ce:	3738      	adds	r7, #56	; 0x38
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000110 	.word	0x20000110
 80021d8:	20000114 	.word	0x20000114
 80021dc:	20000038 	.word	0x20000038
 80021e0:	20000034 	.word	0x20000034
 80021e4:	e000ed04 	.word	0xe000ed04

080021e8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b092      	sub	sp, #72	; 0x48
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80021f6:	2301      	movs	r3, #1
 80021f8:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8002200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002204:	f383 8811 	msr	BASEPRI, r3
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002212:	bf00      	nop
 8002214:	e7fe      	b.n	8002214 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 800221c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002220:	f383 8811 	msr	BASEPRI, r3
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800222e:	bf00      	nop
 8002230:	e7fe      	b.n	8002230 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002232:	f000 fbc3 	bl	80029bc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 800223a:	f3ef 8211 	mrs	r2, BASEPRI
 800223e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002242:	f383 8811 	msr	BASEPRI, r3
 8002246:	f3bf 8f6f 	isb	sy
 800224a:	f3bf 8f4f 	dsb	sy
 800224e:	623a      	str	r2, [r7, #32]
 8002250:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8002252:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002254:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8002256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800225c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	3214      	adds	r2, #20
 8002262:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002268:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800226a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4413      	add	r3, r2
 8002270:	3354      	adds	r3, #84	; 0x54
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002278:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	4413      	add	r3, r2
 800227e:	3354      	adds	r3, #84	; 0x54
 8002280:	2202      	movs	r2, #2
 8002282:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	2b04      	cmp	r3, #4
 8002288:	d83b      	bhi.n	8002302 <xTaskGenericNotifyFromISR+0x11a>
 800228a:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <xTaskGenericNotifyFromISR+0xa8>)
 800228c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002290:	08002321 	.word	0x08002321
 8002294:	080022a5 	.word	0x080022a5
 8002298:	080022c1 	.word	0x080022c1
 800229c:	080022d9 	.word	0x080022d9
 80022a0:	080022e7 	.word	0x080022e7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80022a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	3214      	adds	r2, #20
 80022aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	ea42 0103 	orr.w	r1, r2, r3
 80022b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	3214      	adds	r2, #20
 80022ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80022be:	e032      	b.n	8002326 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80022c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	3214      	adds	r2, #20
 80022c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ca:	1c59      	adds	r1, r3, #1
 80022cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	3214      	adds	r2, #20
 80022d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80022d6:	e026      	b.n	8002326 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80022d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	3214      	adds	r2, #20
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80022e4:	e01f      	b.n	8002326 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80022e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d006      	beq.n	80022fc <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80022ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	3214      	adds	r2, #20
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80022fa:	e014      	b.n	8002326 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8002300:	e011      	b.n	8002326 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002302:	4b60      	ldr	r3, [pc, #384]	; (8002484 <xTaskGenericNotifyFromISR+0x29c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00c      	beq.n	8002324 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800230a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230e:	f383 8811 	msr	BASEPRI, r3
 8002312:	f3bf 8f6f 	isb	sy
 8002316:	f3bf 8f4f 	dsb	sy
 800231a:	61bb      	str	r3, [r7, #24]
    }
 800231c:	bf00      	nop
 800231e:	e7fe      	b.n	800231e <xTaskGenericNotifyFromISR+0x136>
                    break;
 8002320:	bf00      	nop
 8002322:	e000      	b.n	8002326 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8002324:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002326:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800232a:	2b01      	cmp	r3, #1
 800232c:	f040 809e 	bne.w	800246c <xTaskGenericNotifyFromISR+0x284>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <xTaskGenericNotifyFromISR+0x166>
        __asm volatile
 8002338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233c:	f383 8811 	msr	BASEPRI, r3
 8002340:	f3bf 8f6f 	isb	sy
 8002344:	f3bf 8f4f 	dsb	sy
 8002348:	617b      	str	r3, [r7, #20]
    }
 800234a:	bf00      	nop
 800234c:	e7fe      	b.n	800234c <xTaskGenericNotifyFromISR+0x164>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800234e:	4b4e      	ldr	r3, [pc, #312]	; (8002488 <xTaskGenericNotifyFromISR+0x2a0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d15e      	bne.n	8002414 <xTaskGenericNotifyFromISR+0x22c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	633b      	str	r3, [r7, #48]	; 0x30
 800235c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002362:	68d2      	ldr	r2, [r2, #12]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800236c:	6892      	ldr	r2, [r2, #8]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002376:	3304      	adds	r3, #4
 8002378:	429a      	cmp	r2, r3
 800237a:	d103      	bne.n	8002384 <xTaskGenericNotifyFromISR+0x19c>
 800237c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002386:	2200      	movs	r2, #0
 8002388:	615a      	str	r2, [r3, #20]
 800238a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	1e5a      	subs	r2, r3, #1
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	2201      	movs	r2, #1
 800239a:	409a      	lsls	r2, r3
 800239c:	4b3b      	ldr	r3, [pc, #236]	; (800248c <xTaskGenericNotifyFromISR+0x2a4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	4a3a      	ldr	r2, [pc, #232]	; (800248c <xTaskGenericNotifyFromISR+0x2a4>)
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023aa:	4939      	ldr	r1, [pc, #228]	; (8002490 <xTaskGenericNotifyFromISR+0x2a8>)
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	3304      	adds	r3, #4
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023d0:	3204      	adds	r2, #4
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d6:	1d1a      	adds	r2, r3, #4
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4a29      	ldr	r2, [pc, #164]	; (8002490 <xTaskGenericNotifyFromISR+0x2a8>)
 80023ea:	441a      	add	r2, r3
 80023ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ee:	615a      	str	r2, [r3, #20]
 80023f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f4:	4926      	ldr	r1, [pc, #152]	; (8002490 <xTaskGenericNotifyFromISR+0x2a8>)
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	1c59      	adds	r1, r3, #1
 8002404:	4822      	ldr	r0, [pc, #136]	; (8002490 <xTaskGenericNotifyFromISR+0x2a8>)
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4403      	add	r3, r0
 8002410:	6019      	str	r1, [r3, #0]
 8002412:	e01b      	b.n	800244c <xTaskGenericNotifyFromISR+0x264>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002414:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <xTaskGenericNotifyFromISR+0x2ac>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	637b      	str	r3, [r7, #52]	; 0x34
 800241a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800241c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800241e:	61da      	str	r2, [r3, #28]
 8002420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002426:	621a      	str	r2, [r3, #32]
 8002428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800242e:	3218      	adds	r2, #24
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002434:	f103 0218 	add.w	r2, r3, #24
 8002438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800243e:	4a15      	ldr	r2, [pc, #84]	; (8002494 <xTaskGenericNotifyFromISR+0x2ac>)
 8002440:	629a      	str	r2, [r3, #40]	; 0x28
 8002442:	4b14      	ldr	r3, [pc, #80]	; (8002494 <xTaskGenericNotifyFromISR+0x2ac>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3301      	adds	r3, #1
 8002448:	4a12      	ldr	r2, [pc, #72]	; (8002494 <xTaskGenericNotifyFromISR+0x2ac>)
 800244a:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800244c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800244e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <xTaskGenericNotifyFromISR+0x2b0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	429a      	cmp	r2, r3
 8002458:	d908      	bls.n	800246c <xTaskGenericNotifyFromISR+0x284>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800245a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <xTaskGenericNotifyFromISR+0x27e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002462:	2201      	movs	r2, #1
 8002464:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8002466:	4b0d      	ldr	r3, [pc, #52]	; (800249c <xTaskGenericNotifyFromISR+0x2b4>)
 8002468:	2201      	movs	r2, #1
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800246e:	613b      	str	r3, [r7, #16]
        __asm volatile
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	f383 8811 	msr	BASEPRI, r3
    }
 8002476:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8002478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 800247a:	4618      	mov	r0, r3
 800247c:	3748      	adds	r7, #72	; 0x48
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000110 	.word	0x20000110
 8002488:	20000134 	.word	0x20000134
 800248c:	20000114 	.word	0x20000114
 8002490:	20000038 	.word	0x20000038
 8002494:	200000cc 	.word	0x200000cc
 8002498:	20000034 	.word	0x20000034
 800249c:	20000120 	.word	0x20000120

080024a0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80024aa:	4b36      	ldr	r3, [pc, #216]	; (8002584 <prvAddCurrentTaskToDelayedList+0xe4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024b0:	4b35      	ldr	r3, [pc, #212]	; (8002588 <prvAddCurrentTaskToDelayedList+0xe8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3304      	adds	r3, #4
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe f872 	bl	80005a0 <uxListRemove>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10b      	bne.n	80024da <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80024c2:	4b31      	ldr	r3, [pc, #196]	; (8002588 <prvAddCurrentTaskToDelayedList+0xe8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	2201      	movs	r2, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43da      	mvns	r2, r3
 80024d0:	4b2e      	ldr	r3, [pc, #184]	; (800258c <prvAddCurrentTaskToDelayedList+0xec>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4013      	ands	r3, r2
 80024d6:	4a2d      	ldr	r2, [pc, #180]	; (800258c <prvAddCurrentTaskToDelayedList+0xec>)
 80024d8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e0:	d124      	bne.n	800252c <prvAddCurrentTaskToDelayedList+0x8c>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d021      	beq.n	800252c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024e8:	4b29      	ldr	r3, [pc, #164]	; (8002590 <prvAddCurrentTaskToDelayedList+0xf0>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	4b26      	ldr	r3, [pc, #152]	; (8002588 <prvAddCurrentTaskToDelayedList+0xe8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	4b24      	ldr	r3, [pc, #144]	; (8002588 <prvAddCurrentTaskToDelayedList+0xe8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	6892      	ldr	r2, [r2, #8]
 80024fe:	60da      	str	r2, [r3, #12]
 8002500:	4b21      	ldr	r3, [pc, #132]	; (8002588 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	3204      	adds	r2, #4
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <prvAddCurrentTaskToDelayedList+0xe8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	1d1a      	adds	r2, r3, #4
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <prvAddCurrentTaskToDelayedList+0xf0>)
 800251c:	615a      	str	r2, [r3, #20]
 800251e:	4b1c      	ldr	r3, [pc, #112]	; (8002590 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3301      	adds	r3, #1
 8002524:	4a1a      	ldr	r2, [pc, #104]	; (8002590 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800252a:	e026      	b.n	800257a <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	429a      	cmp	r2, r3
 8002542:	d209      	bcs.n	8002558 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <prvAddCurrentTaskToDelayedList+0xe8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3304      	adds	r3, #4
 800254e:	4619      	mov	r1, r3
 8002550:	4610      	mov	r0, r2
 8002552:	f7fd ffec 	bl	800052e <vListInsert>
}
 8002556:	e010      	b.n	800257a <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <prvAddCurrentTaskToDelayedList+0xf8>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <prvAddCurrentTaskToDelayedList+0xe8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	3304      	adds	r3, #4
 8002562:	4619      	mov	r1, r3
 8002564:	4610      	mov	r0, r2
 8002566:	f7fd ffe2 	bl	800052e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <prvAddCurrentTaskToDelayedList+0xfc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	429a      	cmp	r2, r3
 8002572:	d202      	bcs.n	800257a <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8002574:	4a09      	ldr	r2, [pc, #36]	; (800259c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6013      	str	r3, [r2, #0]
}
 800257a:	bf00      	nop
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000110 	.word	0x20000110
 8002588:	20000034 	.word	0x20000034
 800258c:	20000114 	.word	0x20000114
 8002590:	200000f8 	.word	0x200000f8
 8002594:	200000c8 	.word	0x200000c8
 8002598:	200000c4 	.word	0x200000c4
 800259c:	2000012c 	.word	0x2000012c

080025a0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3b04      	subs	r3, #4
 80025b0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	3b04      	subs	r3, #4
 80025be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f023 0201 	bic.w	r2, r3, #1
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3b04      	subs	r3, #4
 80025ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80025d0:	4a0c      	ldr	r2, [pc, #48]	; (8002604 <pxPortInitialiseStack+0x64>)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3b14      	subs	r3, #20
 80025da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	3b04      	subs	r3, #4
 80025e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f06f 0202 	mvn.w	r2, #2
 80025ee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3b20      	subs	r3, #32
 80025f4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80025f6:	68fb      	ldr	r3, [r7, #12]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	08002609 	.word	0x08002609

08002608 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <prvTaskExitError+0x54>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261a:	d00a      	beq.n	8002632 <prvTaskExitError+0x2a>
        __asm volatile
 800261c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002620:	f383 8811 	msr	BASEPRI, r3
 8002624:	f3bf 8f6f 	isb	sy
 8002628:	f3bf 8f4f 	dsb	sy
 800262c:	60fb      	str	r3, [r7, #12]
    }
 800262e:	bf00      	nop
 8002630:	e7fe      	b.n	8002630 <prvTaskExitError+0x28>
        __asm volatile
 8002632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	60bb      	str	r3, [r7, #8]
    }
 8002644:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002646:	bf00      	nop
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0fc      	beq.n	8002648 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800264e:	bf00      	nop
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	20000004 	.word	0x20000004

08002660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002660:	4b07      	ldr	r3, [pc, #28]	; (8002680 <pxCurrentTCBConst2>)
 8002662:	6819      	ldr	r1, [r3, #0]
 8002664:	6808      	ldr	r0, [r1, #0]
 8002666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800266a:	f380 8809 	msr	PSP, r0
 800266e:	f3bf 8f6f 	isb	sy
 8002672:	f04f 0000 	mov.w	r0, #0
 8002676:	f380 8811 	msr	BASEPRI, r0
 800267a:	4770      	bx	lr
 800267c:	f3af 8000 	nop.w

08002680 <pxCurrentTCBConst2>:
 8002680:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop

08002688 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002688:	4808      	ldr	r0, [pc, #32]	; (80026ac <prvPortStartFirstTask+0x24>)
 800268a:	6800      	ldr	r0, [r0, #0]
 800268c:	6800      	ldr	r0, [r0, #0]
 800268e:	f380 8808 	msr	MSP, r0
 8002692:	f04f 0000 	mov.w	r0, #0
 8002696:	f380 8814 	msr	CONTROL, r0
 800269a:	b662      	cpsie	i
 800269c:	b661      	cpsie	f
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	f3bf 8f6f 	isb	sy
 80026a6:	df00      	svc	0
 80026a8:	bf00      	nop
 80026aa:	0000      	.short	0x0000
 80026ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop

080026b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80026ba:	4b46      	ldr	r3, [pc, #280]	; (80027d4 <xPortStartScheduler+0x120>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a46      	ldr	r2, [pc, #280]	; (80027d8 <xPortStartScheduler+0x124>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d10a      	bne.n	80026da <xPortStartScheduler+0x26>
        __asm volatile
 80026c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c8:	f383 8811 	msr	BASEPRI, r3
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	613b      	str	r3, [r7, #16]
    }
 80026d6:	bf00      	nop
 80026d8:	e7fe      	b.n	80026d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80026da:	4b3e      	ldr	r3, [pc, #248]	; (80027d4 <xPortStartScheduler+0x120>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a3f      	ldr	r2, [pc, #252]	; (80027dc <xPortStartScheduler+0x128>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d10a      	bne.n	80026fa <xPortStartScheduler+0x46>
        __asm volatile
 80026e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e8:	f383 8811 	msr	BASEPRI, r3
 80026ec:	f3bf 8f6f 	isb	sy
 80026f0:	f3bf 8f4f 	dsb	sy
 80026f4:	60fb      	str	r3, [r7, #12]
    }
 80026f6:	bf00      	nop
 80026f8:	e7fe      	b.n	80026f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80026fa:	4b39      	ldr	r3, [pc, #228]	; (80027e0 <xPortStartScheduler+0x12c>)
 80026fc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	22ff      	movs	r2, #255	; 0xff
 800270a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	b2db      	uxtb	r3, r3
 8002712:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4b31      	ldr	r3, [pc, #196]	; (80027e4 <xPortStartScheduler+0x130>)
 8002720:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002722:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <xPortStartScheduler+0x134>)
 8002724:	2207      	movs	r2, #7
 8002726:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002728:	e009      	b.n	800273e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800272a:	4b2f      	ldr	r3, [pc, #188]	; (80027e8 <xPortStartScheduler+0x134>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	3b01      	subs	r3, #1
 8002730:	4a2d      	ldr	r2, [pc, #180]	; (80027e8 <xPortStartScheduler+0x134>)
 8002732:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	b2db      	uxtb	r3, r3
 800273c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002746:	2b80      	cmp	r3, #128	; 0x80
 8002748:	d0ef      	beq.n	800272a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800274a:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <xPortStartScheduler+0x134>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f1c3 0307 	rsb	r3, r3, #7
 8002752:	2b04      	cmp	r3, #4
 8002754:	d00a      	beq.n	800276c <xPortStartScheduler+0xb8>
        __asm volatile
 8002756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275a:	f383 8811 	msr	BASEPRI, r3
 800275e:	f3bf 8f6f 	isb	sy
 8002762:	f3bf 8f4f 	dsb	sy
 8002766:	60bb      	str	r3, [r7, #8]
    }
 8002768:	bf00      	nop
 800276a:	e7fe      	b.n	800276a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800276c:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <xPortStartScheduler+0x134>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <xPortStartScheduler+0x134>)
 8002774:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002776:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <xPortStartScheduler+0x134>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800277e:	4a1a      	ldr	r2, [pc, #104]	; (80027e8 <xPortStartScheduler+0x134>)
 8002780:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800278a:	4b18      	ldr	r3, [pc, #96]	; (80027ec <xPortStartScheduler+0x138>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a17      	ldr	r2, [pc, #92]	; (80027ec <xPortStartScheduler+0x138>)
 8002790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002794:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <xPortStartScheduler+0x138>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a14      	ldr	r2, [pc, #80]	; (80027ec <xPortStartScheduler+0x138>)
 800279c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80027a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80027a2:	f000 f8db 	bl	800295c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <xPortStartScheduler+0x13c>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80027ac:	f000 f8fa 	bl	80029a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80027b0:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <xPortStartScheduler+0x140>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0f      	ldr	r2, [pc, #60]	; (80027f4 <xPortStartScheduler+0x140>)
 80027b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80027ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80027bc:	f7ff ff64 	bl	8002688 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80027c0:	f7ff f83c 	bl	800183c <vTaskSwitchContext>
    prvTaskExitError();
 80027c4:	f7ff ff20 	bl	8002608 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	e000ed00 	.word	0xe000ed00
 80027d8:	410fc271 	.word	0x410fc271
 80027dc:	410fc270 	.word	0x410fc270
 80027e0:	e000e400 	.word	0xe000e400
 80027e4:	20000138 	.word	0x20000138
 80027e8:	2000013c 	.word	0x2000013c
 80027ec:	e000ed20 	.word	0xe000ed20
 80027f0:	20000004 	.word	0x20000004
 80027f4:	e000ef34 	.word	0xe000ef34

080027f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
        __asm volatile
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	607b      	str	r3, [r7, #4]
    }
 8002810:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <vPortEnterCritical+0x58>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	4a0d      	ldr	r2, [pc, #52]	; (8002850 <vPortEnterCritical+0x58>)
 800281a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <vPortEnterCritical+0x58>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d10f      	bne.n	8002844 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <vPortEnterCritical+0x5c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <vPortEnterCritical+0x4c>
        __asm volatile
 800282e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	603b      	str	r3, [r7, #0]
    }
 8002840:	bf00      	nop
 8002842:	e7fe      	b.n	8002842 <vPortEnterCritical+0x4a>
    }
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	20000004 	.word	0x20000004
 8002854:	e000ed04 	.word	0xe000ed04

08002858 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <vPortExitCritical+0x50>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10a      	bne.n	800287c <vPortExitCritical+0x24>
        __asm volatile
 8002866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286a:	f383 8811 	msr	BASEPRI, r3
 800286e:	f3bf 8f6f 	isb	sy
 8002872:	f3bf 8f4f 	dsb	sy
 8002876:	607b      	str	r3, [r7, #4]
    }
 8002878:	bf00      	nop
 800287a:	e7fe      	b.n	800287a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800287c:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <vPortExitCritical+0x50>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	3b01      	subs	r3, #1
 8002882:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <vPortExitCritical+0x50>)
 8002884:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002886:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <vPortExitCritical+0x50>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d105      	bne.n	800289a <vPortExitCritical+0x42>
 800288e:	2300      	movs	r3, #0
 8002890:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	f383 8811 	msr	BASEPRI, r3
    }
 8002898:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000004 	.word	0x20000004
 80028ac:	00000000 	.word	0x00000000

080028b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80028b0:	f3ef 8009 	mrs	r0, PSP
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	4b15      	ldr	r3, [pc, #84]	; (8002910 <pxCurrentTCBConst>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	f01e 0f10 	tst.w	lr, #16
 80028c0:	bf08      	it	eq
 80028c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80028c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ca:	6010      	str	r0, [r2, #0]
 80028cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80028d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80028d4:	f380 8811 	msr	BASEPRI, r0
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	f3bf 8f6f 	isb	sy
 80028e0:	f7fe ffac 	bl	800183c <vTaskSwitchContext>
 80028e4:	f04f 0000 	mov.w	r0, #0
 80028e8:	f380 8811 	msr	BASEPRI, r0
 80028ec:	bc09      	pop	{r0, r3}
 80028ee:	6819      	ldr	r1, [r3, #0]
 80028f0:	6808      	ldr	r0, [r1, #0]
 80028f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028f6:	f01e 0f10 	tst.w	lr, #16
 80028fa:	bf08      	it	eq
 80028fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002900:	f380 8809 	msr	PSP, r0
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	f3af 8000 	nop.w

08002910 <pxCurrentTCBConst>:
 8002910:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop

08002918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
        __asm volatile
 800291e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002922:	f383 8811 	msr	BASEPRI, r3
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	607b      	str	r3, [r7, #4]
    }
 8002930:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002932:	f7fe fe6d 	bl	8001610 <xTaskIncrementTick>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <SysTick_Handler+0x40>)
 800293e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	2300      	movs	r3, #0
 8002946:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	f383 8811 	msr	BASEPRI, r3
    }
 800294e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	e000ed04 	.word	0xe000ed04

0800295c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <vPortSetupTimerInterrupt+0x34>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <vPortSetupTimerInterrupt+0x38>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800296c:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <vPortSetupTimerInterrupt+0x3c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0a      	ldr	r2, [pc, #40]	; (800299c <vPortSetupTimerInterrupt+0x40>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	099b      	lsrs	r3, r3, #6
 8002978:	4a09      	ldr	r2, [pc, #36]	; (80029a0 <vPortSetupTimerInterrupt+0x44>)
 800297a:	3b01      	subs	r3, #1
 800297c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <vPortSetupTimerInterrupt+0x34>)
 8002980:	2207      	movs	r2, #7
 8002982:	601a      	str	r2, [r3, #0]
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000e010 	.word	0xe000e010
 8002994:	e000e018 	.word	0xe000e018
 8002998:	20000008 	.word	0x20000008
 800299c:	10624dd3 	.word	0x10624dd3
 80029a0:	e000e014 	.word	0xe000e014

080029a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80029a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80029b4 <vPortEnableVFP+0x10>
 80029a8:	6801      	ldr	r1, [r0, #0]
 80029aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80029ae:	6001      	str	r1, [r0, #0]
 80029b0:	4770      	bx	lr
 80029b2:	0000      	.short	0x0000
 80029b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop

080029bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80029c2:	f3ef 8305 	mrs	r3, IPSR
 80029c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b0f      	cmp	r3, #15
 80029cc:	d914      	bls.n	80029f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80029ce:	4a17      	ldr	r2, [pc, #92]	; (8002a2c <vPortValidateInterruptPriority+0x70>)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <vPortValidateInterruptPriority+0x74>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	7afa      	ldrb	r2, [r7, #11]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d20a      	bcs.n	80029f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80029e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e6:	f383 8811 	msr	BASEPRI, r3
 80029ea:	f3bf 8f6f 	isb	sy
 80029ee:	f3bf 8f4f 	dsb	sy
 80029f2:	607b      	str	r3, [r7, #4]
    }
 80029f4:	bf00      	nop
 80029f6:	e7fe      	b.n	80029f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80029f8:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <vPortValidateInterruptPriority+0x78>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a00:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <vPortValidateInterruptPriority+0x7c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d90a      	bls.n	8002a1e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0c:	f383 8811 	msr	BASEPRI, r3
 8002a10:	f3bf 8f6f 	isb	sy
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	603b      	str	r3, [r7, #0]
    }
 8002a1a:	bf00      	nop
 8002a1c:	e7fe      	b.n	8002a1c <vPortValidateInterruptPriority+0x60>
    }
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000e3f0 	.word	0xe000e3f0
 8002a30:	20000138 	.word	0x20000138
 8002a34:	e000ed0c 	.word	0xe000ed0c
 8002a38:	2000013c 	.word	0x2000013c

08002a3c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08a      	sub	sp, #40	; 0x28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002a48:	f7fe fcd8 	bl	80013fc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002a4c:	4b65      	ldr	r3, [pc, #404]	; (8002be4 <pvPortMalloc+0x1a8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002a54:	f000 f934 	bl	8002cc0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002a58:	4b63      	ldr	r3, [pc, #396]	; (8002be8 <pvPortMalloc+0x1ac>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f040 80a7 	bne.w	8002bb4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d02d      	beq.n	8002ac8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d227      	bcs.n	8002ac8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002a78:	2208      	movs	r2, #8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d021      	beq.n	8002ace <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f023 0307 	bic.w	r3, r3, #7
 8002a90:	3308      	adds	r3, #8
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d214      	bcs.n	8002ac2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f023 0307 	bic.w	r3, r3, #7
 8002a9e:	3308      	adds	r3, #8
 8002aa0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d010      	beq.n	8002ace <pvPortMalloc+0x92>
        __asm volatile
 8002aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab0:	f383 8811 	msr	BASEPRI, r3
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	617b      	str	r3, [r7, #20]
    }
 8002abe:	bf00      	nop
 8002ac0:	e7fe      	b.n	8002ac0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ac6:	e002      	b.n	8002ace <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	607b      	str	r3, [r7, #4]
 8002acc:	e000      	b.n	8002ad0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ace:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d06e      	beq.n	8002bb4 <pvPortMalloc+0x178>
 8002ad6:	4b45      	ldr	r3, [pc, #276]	; (8002bec <pvPortMalloc+0x1b0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d869      	bhi.n	8002bb4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002ae0:	4b43      	ldr	r3, [pc, #268]	; (8002bf0 <pvPortMalloc+0x1b4>)
 8002ae2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002ae4:	4b42      	ldr	r3, [pc, #264]	; (8002bf0 <pvPortMalloc+0x1b4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002aea:	e004      	b.n	8002af6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d903      	bls.n	8002b08 <pvPortMalloc+0xcc>
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f1      	bne.n	8002aec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002b08:	4b36      	ldr	r3, [pc, #216]	; (8002be4 <pvPortMalloc+0x1a8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d050      	beq.n	8002bb4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2208      	movs	r2, #8
 8002b18:	4413      	add	r3, r2
 8002b1a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	1ad2      	subs	r2, r2, r3
 8002b2c:	2308      	movs	r3, #8
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d91f      	bls.n	8002b74 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <pvPortMalloc+0x120>
        __asm volatile
 8002b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	613b      	str	r3, [r7, #16]
    }
 8002b58:	bf00      	nop
 8002b5a:	e7fe      	b.n	8002b5a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	1ad2      	subs	r2, r2, r3
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002b6e:	69b8      	ldr	r0, [r7, #24]
 8002b70:	f000 f908 	bl	8002d84 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b74:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <pvPortMalloc+0x1b0>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	4a1b      	ldr	r2, [pc, #108]	; (8002bec <pvPortMalloc+0x1b0>)
 8002b80:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b82:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <pvPortMalloc+0x1b0>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <pvPortMalloc+0x1b8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d203      	bcs.n	8002b96 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002b8e:	4b17      	ldr	r3, [pc, #92]	; (8002bec <pvPortMalloc+0x1b0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <pvPortMalloc+0x1b8>)
 8002b94:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <pvPortMalloc+0x1ac>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002baa:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <pvPortMalloc+0x1bc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	4a11      	ldr	r2, [pc, #68]	; (8002bf8 <pvPortMalloc+0x1bc>)
 8002bb2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002bb4:	f7fe fc30 	bl	8001418 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <pvPortMalloc+0x19c>
        __asm volatile
 8002bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	60fb      	str	r3, [r7, #12]
    }
 8002bd4:	bf00      	nop
 8002bd6:	e7fe      	b.n	8002bd6 <pvPortMalloc+0x19a>
    return pvReturn;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3728      	adds	r7, #40	; 0x28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20012d48 	.word	0x20012d48
 8002be8:	20012d5c 	.word	0x20012d5c
 8002bec:	20012d4c 	.word	0x20012d4c
 8002bf0:	20012d40 	.word	0x20012d40
 8002bf4:	20012d50 	.word	0x20012d50
 8002bf8:	20012d54 	.word	0x20012d54

08002bfc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d04d      	beq.n	8002caa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002c0e:	2308      	movs	r3, #8
 8002c10:	425b      	negs	r3, r3
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4413      	add	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <vPortFree+0xb8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10a      	bne.n	8002c40 <vPortFree+0x44>
        __asm volatile
 8002c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2e:	f383 8811 	msr	BASEPRI, r3
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	f3bf 8f4f 	dsb	sy
 8002c3a:	60fb      	str	r3, [r7, #12]
    }
 8002c3c:	bf00      	nop
 8002c3e:	e7fe      	b.n	8002c3e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <vPortFree+0x62>
        __asm volatile
 8002c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	60bb      	str	r3, [r7, #8]
    }
 8002c5a:	bf00      	nop
 8002c5c:	e7fe      	b.n	8002c5c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <vPortFree+0xb8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01e      	beq.n	8002caa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d11a      	bne.n	8002caa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <vPortFree+0xb8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	401a      	ands	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002c84:	f7fe fbba 	bl	80013fc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <vPortFree+0xbc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4413      	add	r3, r2
 8002c92:	4a09      	ldr	r2, [pc, #36]	; (8002cb8 <vPortFree+0xbc>)
 8002c94:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c96:	6938      	ldr	r0, [r7, #16]
 8002c98:	f000 f874 	bl	8002d84 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002c9c:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <vPortFree+0xc0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	4a06      	ldr	r2, [pc, #24]	; (8002cbc <vPortFree+0xc0>)
 8002ca4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002ca6:	f7fe fbb7 	bl	8001418 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002caa:	bf00      	nop
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20012d5c 	.word	0x20012d5c
 8002cb8:	20012d4c 	.word	0x20012d4c
 8002cbc:	20012d58 	.word	0x20012d58

08002cc0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002cc6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002cca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002ccc:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <prvHeapInit+0xac>)
 8002cce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00c      	beq.n	8002cf4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3307      	adds	r3, #7
 8002cde:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0307 	bic.w	r3, r3, #7
 8002ce6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	4a1f      	ldr	r2, [pc, #124]	; (8002d6c <prvHeapInit+0xac>)
 8002cf0:	4413      	add	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002cf8:	4a1d      	ldr	r2, [pc, #116]	; (8002d70 <prvHeapInit+0xb0>)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <prvHeapInit+0xb0>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	4413      	add	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002d0c:	2208      	movs	r2, #8
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0307 	bic.w	r3, r3, #7
 8002d1a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4a15      	ldr	r2, [pc, #84]	; (8002d74 <prvHeapInit+0xb4>)
 8002d20:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002d22:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <prvHeapInit+0xb4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2200      	movs	r2, #0
 8002d28:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002d2a:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <prvHeapInit+0xb4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	1ad2      	subs	r2, r2, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <prvHeapInit+0xb4>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <prvHeapInit+0xb8>)
 8002d4e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <prvHeapInit+0xbc>)
 8002d56:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <prvHeapInit+0xc0>)
 8002d5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d5e:	601a      	str	r2, [r3, #0]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	20000140 	.word	0x20000140
 8002d70:	20012d40 	.word	0x20012d40
 8002d74:	20012d48 	.word	0x20012d48
 8002d78:	20012d50 	.word	0x20012d50
 8002d7c:	20012d4c 	.word	0x20012d4c
 8002d80:	20012d5c 	.word	0x20012d5c

08002d84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <prvInsertBlockIntoFreeList+0xac>)
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	e002      	b.n	8002d98 <prvInsertBlockIntoFreeList+0x14>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d8f7      	bhi.n	8002d92 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	4413      	add	r3, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d108      	bne.n	8002dc6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	441a      	add	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	441a      	add	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d118      	bne.n	8002e0c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <prvInsertBlockIntoFreeList+0xb0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d00d      	beq.n	8002e02 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	441a      	add	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	e008      	b.n	8002e14 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002e02:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <prvInsertBlockIntoFreeList+0xb0>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	e003      	b.n	8002e14 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d002      	beq.n	8002e22 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e22:	bf00      	nop
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20012d40 	.word	0x20012d40
 8002e34:	20012d48 	.word	0x20012d48

08002e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e3e:	f000 fdaf 	bl	80039a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e42:	f000 f8a1 	bl	8002f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e46:	f000 f933 	bl	80030b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002e4a:	f000 f907 	bl	800305c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /*===============Creating tasks==============*/
  status = xTaskCreate(Appliances_Handling_Task, "Appliances_Handling", 200, NULL, 2, &Appliances_task_handle);
 8002e4e:	4b41      	ldr	r3, [pc, #260]	; (8002f54 <main+0x11c>)
 8002e50:	9301      	str	r3, [sp, #4]
 8002e52:	2302      	movs	r3, #2
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	2300      	movs	r3, #0
 8002e58:	22c8      	movs	r2, #200	; 0xc8
 8002e5a:	493f      	ldr	r1, [pc, #252]	; (8002f58 <main+0x120>)
 8002e5c:	483f      	ldr	r0, [pc, #252]	; (8002f5c <main+0x124>)
 8002e5e:	f7fe f906 	bl	800106e <xTaskCreate>
 8002e62:	61f8      	str	r0, [r7, #28]
  configASSERT(pdPASS == status);
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d00a      	beq.n	8002e80 <main+0x48>
        __asm volatile
 8002e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6e:	f383 8811 	msr	BASEPRI, r3
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	f3bf 8f4f 	dsb	sy
 8002e7a:	617b      	str	r3, [r7, #20]
    }
 8002e7c:	bf00      	nop
 8002e7e:	e7fe      	b.n	8002e7e <main+0x46>

  status = xTaskCreate(Command_Handling_Task, "Command_Handling", 200, NULL, 2, &Command_task_handle);
 8002e80:	4b37      	ldr	r3, [pc, #220]	; (8002f60 <main+0x128>)
 8002e82:	9301      	str	r3, [sp, #4]
 8002e84:	2302      	movs	r3, #2
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	2300      	movs	r3, #0
 8002e8a:	22c8      	movs	r2, #200	; 0xc8
 8002e8c:	4935      	ldr	r1, [pc, #212]	; (8002f64 <main+0x12c>)
 8002e8e:	4836      	ldr	r0, [pc, #216]	; (8002f68 <main+0x130>)
 8002e90:	f7fe f8ed 	bl	800106e <xTaskCreate>
 8002e94:	61f8      	str	r0, [r7, #28]
  configASSERT(pdPASS == status);
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d00a      	beq.n	8002eb2 <main+0x7a>
        __asm volatile
 8002e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea0:	f383 8811 	msr	BASEPRI, r3
 8002ea4:	f3bf 8f6f 	isb	sy
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	613b      	str	r3, [r7, #16]
    }
 8002eae:	bf00      	nop
 8002eb0:	e7fe      	b.n	8002eb0 <main+0x78>

  status = xTaskCreate(Menu_Display_Handling_Task, "Menu_Display_Handling", 200, NULL, 2, &Menu_display_task_handle);
 8002eb2:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <main+0x134>)
 8002eb4:	9301      	str	r3, [sp, #4]
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	22c8      	movs	r2, #200	; 0xc8
 8002ebe:	492c      	ldr	r1, [pc, #176]	; (8002f70 <main+0x138>)
 8002ec0:	482c      	ldr	r0, [pc, #176]	; (8002f74 <main+0x13c>)
 8002ec2:	f7fe f8d4 	bl	800106e <xTaskCreate>
 8002ec6:	61f8      	str	r0, [r7, #28]
  configASSERT(pdPASS == status);
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d00a      	beq.n	8002ee4 <main+0xac>
        __asm volatile
 8002ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed2:	f383 8811 	msr	BASEPRI, r3
 8002ed6:	f3bf 8f6f 	isb	sy
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	60fb      	str	r3, [r7, #12]
    }
 8002ee0:	bf00      	nop
 8002ee2:	e7fe      	b.n	8002ee2 <main+0xaa>

  /*===============Creating queues==============*/
  Command_queue = xQueueCreate(10u, sizeof(char));
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	200a      	movs	r0, #10
 8002eea:	f7fd fc13 	bl	8000714 <xQueueGenericCreate>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4a21      	ldr	r2, [pc, #132]	; (8002f78 <main+0x140>)
 8002ef2:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != Command_queue);
 8002ef4:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <main+0x140>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10a      	bne.n	8002f12 <main+0xda>
        __asm volatile
 8002efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f00:	f383 8811 	msr	BASEPRI, r3
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	60bb      	str	r3, [r7, #8]
    }
 8002f0e:	bf00      	nop
 8002f10:	e7fe      	b.n	8002f10 <main+0xd8>

  Print_queue = xQueueCreate(10u, sizeof(char));
 8002f12:	2200      	movs	r2, #0
 8002f14:	2101      	movs	r1, #1
 8002f16:	200a      	movs	r0, #10
 8002f18:	f7fd fbfc 	bl	8000714 <xQueueGenericCreate>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <main+0x144>)
 8002f20:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != Print_queue);
 8002f22:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <main+0x144>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <main+0x108>
        __asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	607b      	str	r3, [r7, #4]
    }
 8002f3c:	bf00      	nop
 8002f3e:	e7fe      	b.n	8002f3e <main+0x106>

  /*===============Enabling UART reception in IT mode==============*/
  uart_status = HAL_UART_Receive_IT(&huart2, (uint8_t *)&User_data, 1u);
 8002f40:	2201      	movs	r2, #1
 8002f42:	490f      	ldr	r1, [pc, #60]	; (8002f80 <main+0x148>)
 8002f44:	480f      	ldr	r0, [pc, #60]	; (8002f84 <main+0x14c>)
 8002f46:	f002 f876 	bl	8005036 <HAL_UART_Receive_IT>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	76fb      	strb	r3, [r7, #27]
  if(HAL_OK == uart_status)
  {
	  //Do something
  }

  vTaskStartScheduler();
 8002f4e:	f7fe fa09 	bl	8001364 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f52:	e7fe      	b.n	8002f52 <main+0x11a>
 8002f54:	20012da4 	.word	0x20012da4
 8002f58:	08005f20 	.word	0x08005f20
 8002f5c:	080036a1 	.word	0x080036a1
 8002f60:	20012da8 	.word	0x20012da8
 8002f64:	08005f34 	.word	0x08005f34
 8002f68:	080037ed 	.word	0x080037ed
 8002f6c:	20012dac 	.word	0x20012dac
 8002f70:	08005f48 	.word	0x08005f48
 8002f74:	08003865 	.word	0x08003865
 8002f78:	20012db0 	.word	0x20012db0
 8002f7c:	20012db4 	.word	0x20012db4
 8002f80:	20012db8 	.word	0x20012db8
 8002f84:	20012d60 	.word	0x20012d60

08002f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b094      	sub	sp, #80	; 0x50
 8002f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f8e:	f107 0320 	add.w	r3, r7, #32
 8002f92:	2230      	movs	r2, #48	; 0x30
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f002 ffaa 	bl	8005ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f9c:	f107 030c 	add.w	r3, r7, #12
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
 8002faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fac:	2300      	movs	r3, #0
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	4b28      	ldr	r3, [pc, #160]	; (8003054 <SystemClock_Config+0xcc>)
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	4a27      	ldr	r2, [pc, #156]	; (8003054 <SystemClock_Config+0xcc>)
 8002fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fba:	6413      	str	r3, [r2, #64]	; 0x40
 8002fbc:	4b25      	ldr	r3, [pc, #148]	; (8003054 <SystemClock_Config+0xcc>)
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fc8:	2300      	movs	r3, #0
 8002fca:	607b      	str	r3, [r7, #4]
 8002fcc:	4b22      	ldr	r3, [pc, #136]	; (8003058 <SystemClock_Config+0xd0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a21      	ldr	r2, [pc, #132]	; (8003058 <SystemClock_Config+0xd0>)
 8002fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <SystemClock_Config+0xd0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe0:	607b      	str	r3, [r7, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fec:	2310      	movs	r3, #16
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ff8:	2308      	movs	r3, #8
 8002ffa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002ffc:	2332      	movs	r3, #50	; 0x32
 8002ffe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003000:	2304      	movs	r3, #4
 8003002:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003004:	2307      	movs	r3, #7
 8003006:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003008:	f107 0320 	add.w	r3, r7, #32
 800300c:	4618      	mov	r0, r3
 800300e:	f001 f84d 	bl	80040ac <HAL_RCC_OscConfig>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003018:	f000 fa0c 	bl	8003434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800301c:	230f      	movs	r3, #15
 800301e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003020:	2302      	movs	r3, #2
 8003022:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003028:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800302c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800302e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003032:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003034:	f107 030c 	add.w	r3, r7, #12
 8003038:	2100      	movs	r1, #0
 800303a:	4618      	mov	r0, r3
 800303c:	f001 faae 	bl	800459c <HAL_RCC_ClockConfig>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003046:	f000 f9f5 	bl	8003434 <Error_Handler>
  }
}
 800304a:	bf00      	nop
 800304c:	3750      	adds	r7, #80	; 0x50
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800
 8003058:	40007000 	.word	0x40007000

0800305c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003060:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <MX_USART2_UART_Init+0x4c>)
 8003062:	4a12      	ldr	r2, [pc, #72]	; (80030ac <MX_USART2_UART_Init+0x50>)
 8003064:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <MX_USART2_UART_Init+0x4c>)
 8003068:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800306c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800306e:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <MX_USART2_UART_Init+0x4c>)
 8003070:	2200      	movs	r2, #0
 8003072:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <MX_USART2_UART_Init+0x4c>)
 8003076:	2200      	movs	r2, #0
 8003078:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800307a:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <MX_USART2_UART_Init+0x4c>)
 800307c:	2200      	movs	r2, #0
 800307e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <MX_USART2_UART_Init+0x4c>)
 8003082:	220c      	movs	r2, #12
 8003084:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <MX_USART2_UART_Init+0x4c>)
 8003088:	2200      	movs	r2, #0
 800308a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <MX_USART2_UART_Init+0x4c>)
 800308e:	2200      	movs	r2, #0
 8003090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003092:	4805      	ldr	r0, [pc, #20]	; (80030a8 <MX_USART2_UART_Init+0x4c>)
 8003094:	f001 ff82 	bl	8004f9c <HAL_UART_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800309e:	f000 f9c9 	bl	8003434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20012d60 	.word	0x20012d60
 80030ac:	40004400 	.word	0x40004400

080030b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	; 0x30
 80030b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b6:	f107 031c 	add.w	r3, r7, #28
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	605a      	str	r2, [r3, #4]
 80030c0:	609a      	str	r2, [r3, #8]
 80030c2:	60da      	str	r2, [r3, #12]
 80030c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	4ba2      	ldr	r3, [pc, #648]	; (8003354 <MX_GPIO_Init+0x2a4>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	4aa1      	ldr	r2, [pc, #644]	; (8003354 <MX_GPIO_Init+0x2a4>)
 80030d0:	f043 0310 	orr.w	r3, r3, #16
 80030d4:	6313      	str	r3, [r2, #48]	; 0x30
 80030d6:	4b9f      	ldr	r3, [pc, #636]	; (8003354 <MX_GPIO_Init+0x2a4>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	4b9b      	ldr	r3, [pc, #620]	; (8003354 <MX_GPIO_Init+0x2a4>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	4a9a      	ldr	r2, [pc, #616]	; (8003354 <MX_GPIO_Init+0x2a4>)
 80030ec:	f043 0304 	orr.w	r3, r3, #4
 80030f0:	6313      	str	r3, [r2, #48]	; 0x30
 80030f2:	4b98      	ldr	r3, [pc, #608]	; (8003354 <MX_GPIO_Init+0x2a4>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	4b94      	ldr	r3, [pc, #592]	; (8003354 <MX_GPIO_Init+0x2a4>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4a93      	ldr	r2, [pc, #588]	; (8003354 <MX_GPIO_Init+0x2a4>)
 8003108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800310c:	6313      	str	r3, [r2, #48]	; 0x30
 800310e:	4b91      	ldr	r3, [pc, #580]	; (8003354 <MX_GPIO_Init+0x2a4>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	4b8d      	ldr	r3, [pc, #564]	; (8003354 <MX_GPIO_Init+0x2a4>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	4a8c      	ldr	r2, [pc, #560]	; (8003354 <MX_GPIO_Init+0x2a4>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6313      	str	r3, [r2, #48]	; 0x30
 800312a:	4b8a      	ldr	r3, [pc, #552]	; (8003354 <MX_GPIO_Init+0x2a4>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	4b86      	ldr	r3, [pc, #536]	; (8003354 <MX_GPIO_Init+0x2a4>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	4a85      	ldr	r2, [pc, #532]	; (8003354 <MX_GPIO_Init+0x2a4>)
 8003140:	f043 0302 	orr.w	r3, r3, #2
 8003144:	6313      	str	r3, [r2, #48]	; 0x30
 8003146:	4b83      	ldr	r3, [pc, #524]	; (8003354 <MX_GPIO_Init+0x2a4>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	4b7f      	ldr	r3, [pc, #508]	; (8003354 <MX_GPIO_Init+0x2a4>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	4a7e      	ldr	r2, [pc, #504]	; (8003354 <MX_GPIO_Init+0x2a4>)
 800315c:	f043 0308 	orr.w	r3, r3, #8
 8003160:	6313      	str	r3, [r2, #48]	; 0x30
 8003162:	4b7c      	ldr	r3, [pc, #496]	; (8003354 <MX_GPIO_Init+0x2a4>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	607b      	str	r3, [r7, #4]
 800316c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800316e:	2200      	movs	r2, #0
 8003170:	2108      	movs	r1, #8
 8003172:	4879      	ldr	r0, [pc, #484]	; (8003358 <MX_GPIO_Init+0x2a8>)
 8003174:	f000 ff66 	bl	8004044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003178:	2201      	movs	r2, #1
 800317a:	2101      	movs	r1, #1
 800317c:	4877      	ldr	r0, [pc, #476]	; (800335c <MX_GPIO_Init+0x2ac>)
 800317e:	f000 ff61 	bl	8004044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003182:	2200      	movs	r2, #0
 8003184:	f24f 0110 	movw	r1, #61456	; 0xf010
 8003188:	4875      	ldr	r0, [pc, #468]	; (8003360 <MX_GPIO_Init+0x2b0>)
 800318a:	f000 ff5b 	bl	8004044 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800318e:	2308      	movs	r3, #8
 8003190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003192:	2301      	movs	r3, #1
 8003194:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319a:	2300      	movs	r3, #0
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800319e:	f107 031c 	add.w	r3, r7, #28
 80031a2:	4619      	mov	r1, r3
 80031a4:	486c      	ldr	r0, [pc, #432]	; (8003358 <MX_GPIO_Init+0x2a8>)
 80031a6:	f000 fdb1 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80031aa:	2301      	movs	r3, #1
 80031ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ae:	2301      	movs	r3, #1
 80031b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b6:	2300      	movs	r3, #0
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80031ba:	f107 031c 	add.w	r3, r7, #28
 80031be:	4619      	mov	r1, r3
 80031c0:	4866      	ldr	r0, [pc, #408]	; (800335c <MX_GPIO_Init+0x2ac>)
 80031c2:	f000 fda3 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80031c6:	2308      	movs	r3, #8
 80031c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ca:	2302      	movs	r3, #2
 80031cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d2:	2300      	movs	r3, #0
 80031d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031d6:	2305      	movs	r3, #5
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80031da:	f107 031c 	add.w	r3, r7, #28
 80031de:	4619      	mov	r1, r3
 80031e0:	485e      	ldr	r0, [pc, #376]	; (800335c <MX_GPIO_Init+0x2ac>)
 80031e2:	f000 fd93 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80031e6:	2301      	movs	r3, #1
 80031e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80031ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80031f4:	f107 031c 	add.w	r3, r7, #28
 80031f8:	4619      	mov	r1, r3
 80031fa:	485a      	ldr	r0, [pc, #360]	; (8003364 <MX_GPIO_Init+0x2b4>)
 80031fc:	f000 fd86 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003200:	2310      	movs	r3, #16
 8003202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003204:	2302      	movs	r3, #2
 8003206:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003208:	2300      	movs	r3, #0
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320c:	2300      	movs	r3, #0
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003210:	2306      	movs	r3, #6
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003214:	f107 031c 	add.w	r3, r7, #28
 8003218:	4619      	mov	r1, r3
 800321a:	4852      	ldr	r0, [pc, #328]	; (8003364 <MX_GPIO_Init+0x2b4>)
 800321c:	f000 fd76 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003220:	23e0      	movs	r3, #224	; 0xe0
 8003222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003224:	2302      	movs	r3, #2
 8003226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322c:	2300      	movs	r3, #0
 800322e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003230:	2305      	movs	r3, #5
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003234:	f107 031c 	add.w	r3, r7, #28
 8003238:	4619      	mov	r1, r3
 800323a:	484a      	ldr	r0, [pc, #296]	; (8003364 <MX_GPIO_Init+0x2b4>)
 800323c:	f000 fd66 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003240:	2304      	movs	r3, #4
 8003242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003244:	2300      	movs	r3, #0
 8003246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	2300      	movs	r3, #0
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800324c:	f107 031c 	add.w	r3, r7, #28
 8003250:	4619      	mov	r1, r3
 8003252:	4845      	ldr	r0, [pc, #276]	; (8003368 <MX_GPIO_Init+0x2b8>)
 8003254:	f000 fd5a 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800325c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325e:	2302      	movs	r3, #2
 8003260:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003262:	2300      	movs	r3, #0
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003266:	2300      	movs	r3, #0
 8003268:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800326a:	2305      	movs	r3, #5
 800326c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800326e:	f107 031c 	add.w	r3, r7, #28
 8003272:	4619      	mov	r1, r3
 8003274:	483c      	ldr	r0, [pc, #240]	; (8003368 <MX_GPIO_Init+0x2b8>)
 8003276:	f000 fd49 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800327a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800327e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003280:	2301      	movs	r3, #1
 8003282:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003288:	2300      	movs	r3, #0
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800328c:	f107 031c 	add.w	r3, r7, #28
 8003290:	4619      	mov	r1, r3
 8003292:	4833      	ldr	r0, [pc, #204]	; (8003360 <MX_GPIO_Init+0x2b0>)
 8003294:	f000 fd3a 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003298:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800329c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329e:	2302      	movs	r3, #2
 80032a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a6:	2300      	movs	r3, #0
 80032a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80032aa:	2306      	movs	r3, #6
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ae:	f107 031c 	add.w	r3, r7, #28
 80032b2:	4619      	mov	r1, r3
 80032b4:	4829      	ldr	r0, [pc, #164]	; (800335c <MX_GPIO_Init+0x2ac>)
 80032b6:	f000 fd29 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80032ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032c0:	2300      	movs	r3, #0
 80032c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80032c8:	f107 031c 	add.w	r3, r7, #28
 80032cc:	4619      	mov	r1, r3
 80032ce:	4825      	ldr	r0, [pc, #148]	; (8003364 <MX_GPIO_Init+0x2b4>)
 80032d0:	f000 fd1c 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80032d4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80032d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	2302      	movs	r3, #2
 80032dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e2:	2300      	movs	r3, #0
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80032e6:	230a      	movs	r3, #10
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ea:	f107 031c 	add.w	r3, r7, #28
 80032ee:	4619      	mov	r1, r3
 80032f0:	481c      	ldr	r0, [pc, #112]	; (8003364 <MX_GPIO_Init+0x2b4>)
 80032f2:	f000 fd0b 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80032f6:	2320      	movs	r3, #32
 80032f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032fa:	2300      	movs	r3, #0
 80032fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003302:	f107 031c 	add.w	r3, r7, #28
 8003306:	4619      	mov	r1, r3
 8003308:	4815      	ldr	r0, [pc, #84]	; (8003360 <MX_GPIO_Init+0x2b0>)
 800330a:	f000 fcff 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800330e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003314:	2312      	movs	r3, #18
 8003316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331c:	2300      	movs	r3, #0
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003320:	2304      	movs	r3, #4
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003324:	f107 031c 	add.w	r3, r7, #28
 8003328:	4619      	mov	r1, r3
 800332a:	480f      	ldr	r0, [pc, #60]	; (8003368 <MX_GPIO_Init+0x2b8>)
 800332c:	f000 fcee 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003330:	2302      	movs	r3, #2
 8003332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003334:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333a:	2300      	movs	r3, #0
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800333e:	f107 031c 	add.w	r3, r7, #28
 8003342:	4619      	mov	r1, r3
 8003344:	4804      	ldr	r0, [pc, #16]	; (8003358 <MX_GPIO_Init+0x2a8>)
 8003346:	f000 fce1 	bl	8003d0c <HAL_GPIO_Init>

}
 800334a:	bf00      	nop
 800334c:	3730      	adds	r7, #48	; 0x30
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800
 8003358:	40021000 	.word	0x40021000
 800335c:	40020800 	.word	0x40020800
 8003360:	40020c00 	.word	0x40020c00
 8003364:	40020000 	.word	0x40020000
 8003368:	40020400 	.word	0x40020400

0800336c <HAL_UART_RxCpltCallback>:
 * Return Value : None
 * Parameters : UART handler pointer
 * Description : This callback function shall be called each time a data byte is received over UART interrupt.
 * ========================================*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af02      	add	r7, sp, #8
 8003372:	6078      	str	r0, [r7, #4]
	uint8_t dummy_data;
	BaseType_t status;
	HAL_StatusTypeDef uart_status;
	/*Check if command queue is full*/
	if(pdTRUE == xQueueIsQueueFullFromISR(Command_queue))
 8003374:	4b22      	ldr	r3, [pc, #136]	; (8003400 <HAL_UART_RxCpltCallback+0x94>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd fe52 	bl	8001022 <xQueueIsQueueFullFromISR>
 800337e:	4603      	mov	r3, r0
 8003380:	2b01      	cmp	r3, #1
 8003382:	d119      	bne.n	80033b8 <HAL_UART_RxCpltCallback+0x4c>
	{
		/*If queue is full and last received byte represents new line which means end of command*/
		if(User_data == '\n')
 8003384:	4b1f      	ldr	r3, [pc, #124]	; (8003404 <HAL_UART_RxCpltCallback+0x98>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b0a      	cmp	r3, #10
 800338c:	d11c      	bne.n	80033c8 <HAL_UART_RxCpltCallback+0x5c>
		{
			/*last data byte is taken out and new line character is put at last spot*/
			status = xQueueReceiveFromISR(Command_queue, (void *)&dummy_data, NULL);
 800338e:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <HAL_UART_RxCpltCallback+0x94>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f107 010a 	add.w	r1, r7, #10
 8003396:	2200      	movs	r2, #0
 8003398:	4618      	mov	r0, r3
 800339a:	f7fd fc85 	bl	8000ca8 <xQueueReceiveFromISR>
 800339e:	60f8      	str	r0, [r7, #12]
			if(pdPASS == status)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d110      	bne.n	80033c8 <HAL_UART_RxCpltCallback+0x5c>
			{
				status = xQueueSendFromISR(Command_queue, (void *)&User_data, NULL);
 80033a6:	4b16      	ldr	r3, [pc, #88]	; (8003400 <HAL_UART_RxCpltCallback+0x94>)
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	2300      	movs	r3, #0
 80033ac:	2200      	movs	r2, #0
 80033ae:	4915      	ldr	r1, [pc, #84]	; (8003404 <HAL_UART_RxCpltCallback+0x98>)
 80033b0:	f7fd fb08 	bl	80009c4 <xQueueGenericSendFromISR>
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	e007      	b.n	80033c8 <HAL_UART_RxCpltCallback+0x5c>
		}
	}
	else
	{
		/*Just enqueue the data byte if queue is not full*/
		status = xQueueSendFromISR(Command_queue, (void *)&User_data, NULL);
 80033b8:	4b11      	ldr	r3, [pc, #68]	; (8003400 <HAL_UART_RxCpltCallback+0x94>)
 80033ba:	6818      	ldr	r0, [r3, #0]
 80033bc:	2300      	movs	r3, #0
 80033be:	2200      	movs	r2, #0
 80033c0:	4910      	ldr	r1, [pc, #64]	; (8003404 <HAL_UART_RxCpltCallback+0x98>)
 80033c2:	f7fd faff 	bl	80009c4 <xQueueGenericSendFromISR>
 80033c6:	60f8      	str	r0, [r7, #12]
		if(pdPASS != status)
		{
			//Do something
		}
	}
	if(User_data == '\n')
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <HAL_UART_RxCpltCallback+0x98>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b0a      	cmp	r3, #10
 80033d0:	d10b      	bne.n	80033ea <HAL_UART_RxCpltCallback+0x7e>
	{
		/*Once whole command has been received, send a notification to command handling task to handle the command received*/
		status = xTaskNotifyFromISR(Command_task_handle, 0, eNoAction, NULL);
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <HAL_UART_RxCpltCallback+0x9c>)
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	2300      	movs	r3, #0
 80033d8:	9301      	str	r3, [sp, #4]
 80033da:	2300      	movs	r3, #0
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	2300      	movs	r3, #0
 80033e0:	2200      	movs	r2, #0
 80033e2:	2100      	movs	r1, #0
 80033e4:	f7fe ff00 	bl	80021e8 <xTaskGenericNotifyFromISR>
 80033e8:	60f8      	str	r0, [r7, #12]
		{
			//Do something
		}
	}
	/*Enable the UART reception for next byte in interrupt mode*/
	uart_status = HAL_UART_Receive_IT(&huart2, (uint8_t *)&User_data, 1u);
 80033ea:	2201      	movs	r2, #1
 80033ec:	4905      	ldr	r1, [pc, #20]	; (8003404 <HAL_UART_RxCpltCallback+0x98>)
 80033ee:	4807      	ldr	r0, [pc, #28]	; (800340c <HAL_UART_RxCpltCallback+0xa0>)
 80033f0:	f001 fe21 	bl	8005036 <HAL_UART_Receive_IT>
 80033f4:	4603      	mov	r3, r0
 80033f6:	72fb      	strb	r3, [r7, #11]
	if(HAL_OK == uart_status)
	{
	  //Do something
	}
}
 80033f8:	bf00      	nop
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20012db0 	.word	0x20012db0
 8003404:	20012db8 	.word	0x20012db8
 8003408:	20012da8 	.word	0x20012da8
 800340c:	20012d60 	.word	0x20012d60

08003410 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a04      	ldr	r2, [pc, #16]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003422:	f000 fadf 	bl	80039e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40001000 	.word	0x40001000

08003434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003438:	b672      	cpsid	i
}
 800343a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800343c:	e7fe      	b.n	800343c <Error_Handler+0x8>
	...

08003440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	607b      	str	r3, [r7, #4]
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <HAL_MspInit+0x4c>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	4a0f      	ldr	r2, [pc, #60]	; (800348c <HAL_MspInit+0x4c>)
 8003450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003454:	6453      	str	r3, [r2, #68]	; 0x44
 8003456:	4b0d      	ldr	r3, [pc, #52]	; (800348c <HAL_MspInit+0x4c>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	603b      	str	r3, [r7, #0]
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <HAL_MspInit+0x4c>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	4a08      	ldr	r2, [pc, #32]	; (800348c <HAL_MspInit+0x4c>)
 800346c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003470:	6413      	str	r3, [r2, #64]	; 0x40
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_MspInit+0x4c>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800

08003490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08a      	sub	sp, #40	; 0x28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	f107 0314 	add.w	r3, r7, #20
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <HAL_UART_MspInit+0x94>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d133      	bne.n	800351a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	4b1c      	ldr	r3, [pc, #112]	; (8003528 <HAL_UART_MspInit+0x98>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	4a1b      	ldr	r2, [pc, #108]	; (8003528 <HAL_UART_MspInit+0x98>)
 80034bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c0:	6413      	str	r3, [r2, #64]	; 0x40
 80034c2:	4b19      	ldr	r3, [pc, #100]	; (8003528 <HAL_UART_MspInit+0x98>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	4b15      	ldr	r3, [pc, #84]	; (8003528 <HAL_UART_MspInit+0x98>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	4a14      	ldr	r2, [pc, #80]	; (8003528 <HAL_UART_MspInit+0x98>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	6313      	str	r3, [r2, #48]	; 0x30
 80034de:	4b12      	ldr	r3, [pc, #72]	; (8003528 <HAL_UART_MspInit+0x98>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034ea:	230c      	movs	r3, #12
 80034ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ee:	2302      	movs	r3, #2
 80034f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f6:	2303      	movs	r3, #3
 80034f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034fa:	2307      	movs	r3, #7
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034fe:	f107 0314 	add.w	r3, r7, #20
 8003502:	4619      	mov	r1, r3
 8003504:	4809      	ldr	r0, [pc, #36]	; (800352c <HAL_UART_MspInit+0x9c>)
 8003506:	f000 fc01 	bl	8003d0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800350a:	2200      	movs	r2, #0
 800350c:	2100      	movs	r1, #0
 800350e:	2026      	movs	r0, #38	; 0x26
 8003510:	f000 fb40 	bl	8003b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003514:	2026      	movs	r0, #38	; 0x26
 8003516:	f000 fb59 	bl	8003bcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800351a:	bf00      	nop
 800351c:	3728      	adds	r7, #40	; 0x28
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40004400 	.word	0x40004400
 8003528:	40023800 	.word	0x40023800
 800352c:	40020000 	.word	0x40020000

08003530 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08e      	sub	sp, #56	; 0x38
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	4b33      	ldr	r3, [pc, #204]	; (8003614 <HAL_InitTick+0xe4>)
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	4a32      	ldr	r2, [pc, #200]	; (8003614 <HAL_InitTick+0xe4>)
 800354a:	f043 0310 	orr.w	r3, r3, #16
 800354e:	6413      	str	r3, [r2, #64]	; 0x40
 8003550:	4b30      	ldr	r3, [pc, #192]	; (8003614 <HAL_InitTick+0xe4>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800355c:	f107 0210 	add.w	r2, r7, #16
 8003560:	f107 0314 	add.w	r3, r7, #20
 8003564:	4611      	mov	r1, r2
 8003566:	4618      	mov	r0, r3
 8003568:	f001 fa38 	bl	80049dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003572:	2b00      	cmp	r3, #0
 8003574:	d103      	bne.n	800357e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003576:	f001 fa09 	bl	800498c <HAL_RCC_GetPCLK1Freq>
 800357a:	6378      	str	r0, [r7, #52]	; 0x34
 800357c:	e004      	b.n	8003588 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800357e:	f001 fa05 	bl	800498c <HAL_RCC_GetPCLK1Freq>
 8003582:	4603      	mov	r3, r0
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358a:	4a23      	ldr	r2, [pc, #140]	; (8003618 <HAL_InitTick+0xe8>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	0c9b      	lsrs	r3, r3, #18
 8003592:	3b01      	subs	r3, #1
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003596:	4b21      	ldr	r3, [pc, #132]	; (800361c <HAL_InitTick+0xec>)
 8003598:	4a21      	ldr	r2, [pc, #132]	; (8003620 <HAL_InitTick+0xf0>)
 800359a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800359c:	4b1f      	ldr	r3, [pc, #124]	; (800361c <HAL_InitTick+0xec>)
 800359e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80035a4:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_InitTick+0xec>)
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <HAL_InitTick+0xec>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b0:	4b1a      	ldr	r3, [pc, #104]	; (800361c <HAL_InitTick+0xec>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_InitTick+0xec>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80035bc:	4817      	ldr	r0, [pc, #92]	; (800361c <HAL_InitTick+0xec>)
 80035be:	f001 fa3f 	bl	8004a40 <HAL_TIM_Base_Init>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80035c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d11b      	bne.n	8003608 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80035d0:	4812      	ldr	r0, [pc, #72]	; (800361c <HAL_InitTick+0xec>)
 80035d2:	f001 fa8f 	bl	8004af4 <HAL_TIM_Base_Start_IT>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80035dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d111      	bne.n	8003608 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80035e4:	2036      	movs	r0, #54	; 0x36
 80035e6:	f000 faf1 	bl	8003bcc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b0f      	cmp	r3, #15
 80035ee:	d808      	bhi.n	8003602 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80035f0:	2200      	movs	r2, #0
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	2036      	movs	r0, #54	; 0x36
 80035f6:	f000 facd 	bl	8003b94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035fa:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <HAL_InitTick+0xf4>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	e002      	b.n	8003608 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003608:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800360c:	4618      	mov	r0, r3
 800360e:	3738      	adds	r7, #56	; 0x38
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40023800 	.word	0x40023800
 8003618:	431bde83 	.word	0x431bde83
 800361c:	20012dbc 	.word	0x20012dbc
 8003620:	40001000 	.word	0x40001000
 8003624:	20000010 	.word	0x20000010

08003628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800362c:	e7fe      	b.n	800362c <NMI_Handler+0x4>

0800362e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800362e:	b480      	push	{r7}
 8003630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003632:	e7fe      	b.n	8003632 <HardFault_Handler+0x4>

08003634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003638:	e7fe      	b.n	8003638 <MemManage_Handler+0x4>

0800363a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800363a:	b480      	push	{r7}
 800363c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800363e:	e7fe      	b.n	800363e <BusFault_Handler+0x4>

08003640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003644:	e7fe      	b.n	8003644 <UsageFault_Handler+0x4>

08003646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003646:	b480      	push	{r7}
 8003648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800364a:	bf00      	nop
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003658:	4802      	ldr	r0, [pc, #8]	; (8003664 <USART2_IRQHandler+0x10>)
 800365a:	f001 fd1d 	bl	8005098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20012d60 	.word	0x20012d60

08003668 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800366c:	4802      	ldr	r0, [pc, #8]	; (8003678 <TIM6_DAC_IRQHandler+0x10>)
 800366e:	f001 fab1 	bl	8004bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20012dbc 	.word	0x20012dbc

0800367c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <SystemInit+0x20>)
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003686:	4a05      	ldr	r2, [pc, #20]	; (800369c <SystemInit+0x20>)
 8003688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800368c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <Appliances_Handling_Task>:
 * Return Value : None
 * Parameters : pointer to parameter
 * Description : The task is invoked for handling the commands for appliances control
 * ========================================*/
void Appliances_Handling_Task(void *param)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08a      	sub	sp, #40	; 0x28
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	6078      	str	r0, [r7, #4]
	command_t cmd;
	BaseType_t status;
	const char *appliances_menu_msg =  "===========================\n"
 80036a8:	4b2f      	ldr	r3, [pc, #188]	; (8003768 <Appliances_Handling_Task+0xc8>)
 80036aa:	60fb      	str	r3, [r7, #12]
									   "Fan                   --->2\n"
									   "Enter your choice: ";
	while(1)
	{
		/*Send the appliance control menu into the print queue*/
		status = xQueueSend(Print_queue, (void *)&appliances_menu_msg , portMAX_DELAY);
 80036ac:	4b2f      	ldr	r3, [pc, #188]	; (800376c <Appliances_Handling_Task+0xcc>)
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	f107 010c 	add.w	r1, r7, #12
 80036b4:	2300      	movs	r3, #0
 80036b6:	f04f 32ff 	mov.w	r2, #4294967295
 80036ba:	f7fd f89d 	bl	80007f8 <xQueueGenericSend>
 80036be:	61f8      	str	r0, [r7, #28]
		if(pdTRUE == status)
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d142      	bne.n	800374c <Appliances_Handling_Task+0xac>
		{
			/*Waiting for notification from menu task*/
			status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80036c6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	2300      	movs	r3, #0
 80036ce:	2200      	movs	r2, #0
 80036d0:	2100      	movs	r1, #0
 80036d2:	2000      	movs	r0, #0
 80036d4:	f7fe fbe6 	bl	8001ea4 <xTaskGenericNotifyWait>
 80036d8:	61f8      	str	r0, [r7, #28]
			if(pdTRUE == status)
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d135      	bne.n	800374c <Appliances_Handling_Task+0xac>
			{
				/*Extracting command from command queue and placing in command structure*/
				Extract_command(&cmd);
 80036e0:	f107 0310 	add.w	r3, r7, #16
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 f84b 	bl	8003780 <Extract_command>
				if(1u == cmd.len)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d124      	bne.n	800373a <Appliances_Handling_Task+0x9a>
				{
					if(cmd.cmd_payload[0] == '0')
 80036f0:	7c3b      	ldrb	r3, [r7, #16]
 80036f2:	2b30      	cmp	r3, #48	; 0x30
 80036f4:	d105      	bne.n	8003702 <Appliances_Handling_Task+0x62>
					{
						HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 80036f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036fa:	481d      	ldr	r0, [pc, #116]	; (8003770 <Appliances_Handling_Task+0xd0>)
 80036fc:	f000 fcbb 	bl	8004076 <HAL_GPIO_TogglePin>
 8003700:	e024      	b.n	800374c <Appliances_Handling_Task+0xac>
					}
					else if(cmd.cmd_payload[0] == '1')
 8003702:	7c3b      	ldrb	r3, [r7, #16]
 8003704:	2b31      	cmp	r3, #49	; 0x31
 8003706:	d105      	bne.n	8003714 <Appliances_Handling_Task+0x74>
					{
						HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8003708:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800370c:	4818      	ldr	r0, [pc, #96]	; (8003770 <Appliances_Handling_Task+0xd0>)
 800370e:	f000 fcb2 	bl	8004076 <HAL_GPIO_TogglePin>
 8003712:	e01b      	b.n	800374c <Appliances_Handling_Task+0xac>
					}
					else if(cmd.cmd_payload[0] == '2')
 8003714:	7c3b      	ldrb	r3, [r7, #16]
 8003716:	2b32      	cmp	r3, #50	; 0x32
 8003718:	d105      	bne.n	8003726 <Appliances_Handling_Task+0x86>
					{
						HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 800371a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800371e:	4814      	ldr	r0, [pc, #80]	; (8003770 <Appliances_Handling_Task+0xd0>)
 8003720:	f000 fca9 	bl	8004076 <HAL_GPIO_TogglePin>
 8003724:	e012      	b.n	800374c <Appliances_Handling_Task+0xac>
					}
					else
					{
						/*Sending "invalid message" warning to print queue*/
						status = xQueueSend(Print_queue, &Invalid_msg , portMAX_DELAY);
 8003726:	4b11      	ldr	r3, [pc, #68]	; (800376c <Appliances_Handling_Task+0xcc>)
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	2300      	movs	r3, #0
 800372c:	f04f 32ff 	mov.w	r2, #4294967295
 8003730:	4910      	ldr	r1, [pc, #64]	; (8003774 <Appliances_Handling_Task+0xd4>)
 8003732:	f7fd f861 	bl	80007f8 <xQueueGenericSend>
 8003736:	61f8      	str	r0, [r7, #28]
 8003738:	e008      	b.n	800374c <Appliances_Handling_Task+0xac>
					}
				}
				else
				{
					/*Sending "invalid message" warning to print queue*/
					status = xQueueSend(Print_queue, &Invalid_msg , portMAX_DELAY);
 800373a:	4b0c      	ldr	r3, [pc, #48]	; (800376c <Appliances_Handling_Task+0xcc>)
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	2300      	movs	r3, #0
 8003740:	f04f 32ff 	mov.w	r2, #4294967295
 8003744:	490b      	ldr	r1, [pc, #44]	; (8003774 <Appliances_Handling_Task+0xd4>)
 8003746:	f7fd f857 	bl	80007f8 <xQueueGenericSend>
 800374a:	61f8      	str	r0, [r7, #28]
					}
				}
			}
		}
		/*Updating the current state of task*/
		Curr_state = e_main_menu_state;
 800374c:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <Appliances_Handling_Task+0xd8>)
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
		/*sending notification to menu task to display menu again*/
		xTaskNotify(Menu_display_task_handle, 0u, eNoAction);
 8003752:	4b0a      	ldr	r3, [pc, #40]	; (800377c <Appliances_Handling_Task+0xdc>)
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	2300      	movs	r3, #0
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	2300      	movs	r3, #0
 800375c:	2200      	movs	r2, #0
 800375e:	2100      	movs	r1, #0
 8003760:	f7fe fc20 	bl	8001fa4 <xTaskGenericNotify>
		status = xQueueSend(Print_queue, (void *)&appliances_menu_msg , portMAX_DELAY);
 8003764:	e7a2      	b.n	80036ac <Appliances_Handling_Task+0xc>
 8003766:	bf00      	nop
 8003768:	08005f80 	.word	0x08005f80
 800376c:	20012db4 	.word	0x20012db4
 8003770:	40020c00 	.word	0x40020c00
 8003774:	2000000c 	.word	0x2000000c
 8003778:	20012db9 	.word	0x20012db9
 800377c:	20012dac 	.word	0x20012dac

08003780 <Extract_command>:
 * Return Value : None
 * Parameters :	Command structure pointer
 * Description : This function picks bytes from input queue and then place it in command structure
 * ========================================*/
void Extract_command(command_t *cmd)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
	uint8_t item;
	uint8_t i = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;
	/*Check if input data queue is not empty*/
	if(0u == uxQueueMessagesWaiting(Command_queue))
 800378c:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <Extract_command+0x68>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7fd fb18 	bl	8000dc6 <uxQueueMessagesWaiting>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d020      	beq.n	80037de <Extract_command+0x5e>
	{
		return;
	}
	do
	{
		status = xQueueReceive(Command_queue, (void *)&item, 0);
 800379c:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <Extract_command+0x68>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f107 010f 	add.w	r1, r7, #15
 80037a4:	2200      	movs	r2, #0
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fd f9b6 	bl	8000b18 <xQueueReceive>
 80037ac:	6138      	str	r0, [r7, #16]
		if(pdTRUE  == status)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d106      	bne.n	80037c2 <Extract_command+0x42>
		{
			cmd->cmd_payload[i++] = item;
 80037b4:	7dfb      	ldrb	r3, [r7, #23]
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	75fa      	strb	r2, [r7, #23]
 80037ba:	461a      	mov	r2, r3
 80037bc:	7bf9      	ldrb	r1, [r7, #15]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	5499      	strb	r1, [r3, r2]
		}
	}
	while(item!='\n');
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	2b0a      	cmp	r3, #10
 80037c6:	d1e9      	bne.n	800379c <Extract_command+0x1c>
	cmd->cmd_payload[i-1] = '\0';
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	2100      	movs	r1, #0
 80037d0:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1;
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	461a      	mov	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	e000      	b.n	80037e0 <Extract_command+0x60>
		return;
 80037de:	bf00      	nop
}
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20012db0 	.word	0x20012db0

080037ec <Command_Handling_Task>:
 * Return Value : None
 * Parameters : it takes void pointer as parameter which can be passed while creating the task
 * Description : The task picks command from queue, populates it in command structure and notify the task based on command and state
 * ========================================*/
void Command_Handling_Task(void *param)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	command_t cmd;
	while(1)
	{
		/*The task remains in blocked state until it receives notification from UART receive call back function*/
		status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80037f4:	f04f 33ff 	mov.w	r3, #4294967295
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	2300      	movs	r3, #0
 80037fc:	2200      	movs	r2, #0
 80037fe:	2100      	movs	r1, #0
 8003800:	2000      	movs	r0, #0
 8003802:	f7fe fb4f 	bl	8001ea4 <xTaskGenericNotifyWait>
 8003806:	6178      	str	r0, [r7, #20]
		if(pdPASS == status)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d1f2      	bne.n	80037f4 <Command_Handling_Task+0x8>
		{
			Extract_command(&cmd);
 800380e:	f107 0308 	add.w	r3, r7, #8
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff ffb4 	bl	8003780 <Extract_command>
			if(Curr_state == e_main_menu_state)
 8003818:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <Command_Handling_Task+0x6c>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10b      	bne.n	8003838 <Command_Handling_Task+0x4c>
			{
				/*Notifying the menu task by sending address of command structure object*/
				status = xTaskNotify(Menu_display_task_handle, (uint32_t)&cmd, eNoAction);
 8003820:	4b0e      	ldr	r3, [pc, #56]	; (800385c <Command_Handling_Task+0x70>)
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	f107 0208 	add.w	r2, r7, #8
 8003828:	2300      	movs	r3, #0
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2300      	movs	r3, #0
 800382e:	2100      	movs	r1, #0
 8003830:	f7fe fbb8 	bl	8001fa4 <xTaskGenericNotify>
 8003834:	6178      	str	r0, [r7, #20]
 8003836:	e7dd      	b.n	80037f4 <Command_Handling_Task+0x8>
				if(pdPASS != status)
				{
					//Do something
				}
			}
			else if(Curr_state == e_appliances_control_state)
 8003838:	4b07      	ldr	r3, [pc, #28]	; (8003858 <Command_Handling_Task+0x6c>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d1d9      	bne.n	80037f4 <Command_Handling_Task+0x8>
			{
				/*Notifying the appliances task by sending address of command structure object*/
				status = xTaskNotify(Appliances_task_handle, (uint32_t)&cmd, eNoAction);
 8003840:	4b07      	ldr	r3, [pc, #28]	; (8003860 <Command_Handling_Task+0x74>)
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	f107 0208 	add.w	r2, r7, #8
 8003848:	2300      	movs	r3, #0
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	2300      	movs	r3, #0
 800384e:	2100      	movs	r1, #0
 8003850:	f7fe fba8 	bl	8001fa4 <xTaskGenericNotify>
 8003854:	6178      	str	r0, [r7, #20]
		status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8003856:	e7cd      	b.n	80037f4 <Command_Handling_Task+0x8>
 8003858:	20012db9 	.word	0x20012db9
 800385c:	20012dac 	.word	0x20012dac
 8003860:	20012da4 	.word	0x20012da4

08003864 <Menu_Display_Handling_Task>:
 * Return Value : None
 * Parameters : it takes void pointer as parameter which can be passed while creating the task
 * Description : The task is responsible for menu display, taking user cmd and notifying other tasks.
 * ========================================*/
void Menu_Display_Handling_Task(void *param)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af02      	add	r7, sp, #8
 800386a:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	uint32_t cmd_add;
	command_t *cmd;
	const char *menu_msg = "===========================\n"
 800386c:	4b32      	ldr	r3, [pc, #200]	; (8003938 <Menu_Display_Handling_Task+0xd4>)
 800386e:	60bb      	str	r3, [r7, #8]
			               "Exit                  --->1\n"
						   "Enter your choice: ";
	while(1)
	{
		/*The message to be printed on command prompt, shall be sent to queue*/
		status = xQueueSend(Print_queue, (void *)&menu_msg , portMAX_DELAY);
 8003870:	4b32      	ldr	r3, [pc, #200]	; (800393c <Menu_Display_Handling_Task+0xd8>)
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	f107 0108 	add.w	r1, r7, #8
 8003878:	2300      	movs	r3, #0
 800387a:	f04f 32ff 	mov.w	r2, #4294967295
 800387e:	f7fc ffbb 	bl	80007f8 <xQueueGenericSend>
 8003882:	6138      	str	r0, [r7, #16]

		/*the task shall go to blocked state, waiting for notification from command handling task*/
		if(pdTRUE == status)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d10f      	bne.n	80038aa <Menu_Display_Handling_Task+0x46>
		{
			status = xTaskNotifyWait(0, 0, &cmd_add, portMAX_DELAY);
 800388a:	f107 030c 	add.w	r3, r7, #12
 800388e:	f04f 32ff 	mov.w	r2, #4294967295
 8003892:	9200      	str	r2, [sp, #0]
 8003894:	2200      	movs	r2, #0
 8003896:	2100      	movs	r1, #0
 8003898:	2000      	movs	r0, #0
 800389a:	f7fe fb03 	bl	8001ea4 <xTaskGenericNotifyWait>
 800389e:	6138      	str	r0, [r7, #16]
			if(pdTRUE == status)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <Menu_Display_Handling_Task+0x46>
			{
				cmd = (command_t *)cmd_add;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	617b      	str	r3, [r7, #20]
			}
		}
		if(cmd->len == 1)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d137      	bne.n	8003922 <Menu_Display_Handling_Task+0xbe>
		{
			/*User option: Appliances control*/
			if(cmd->cmd_payload[0] == '0')
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b30      	cmp	r3, #48	; 0x30
 80038b8:	d11a      	bne.n	80038f0 <Menu_Display_Handling_Task+0x8c>
			{
				Curr_state = e_appliances_control_state;
 80038ba:	4b21      	ldr	r3, [pc, #132]	; (8003940 <Menu_Display_Handling_Task+0xdc>)
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
				status = xTaskNotify(Appliances_task_handle, 0u, eNoAction);/*Notify appliances handling task*/
 80038c0:	4b20      	ldr	r3, [pc, #128]	; (8003944 <Menu_Display_Handling_Task+0xe0>)
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	2300      	movs	r3, #0
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	2300      	movs	r3, #0
 80038ca:	2200      	movs	r2, #0
 80038cc:	2100      	movs	r1, #0
 80038ce:	f7fe fb69 	bl	8001fa4 <xTaskGenericNotify>
 80038d2:	6138      	str	r0, [r7, #16]
				if(pdPASS == status)
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d1ca      	bne.n	8003870 <Menu_Display_Handling_Task+0xc>
				{
					status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);/*Wait for next notification*/
 80038da:	f04f 33ff 	mov.w	r3, #4294967295
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2300      	movs	r3, #0
 80038e2:	2200      	movs	r2, #0
 80038e4:	2100      	movs	r1, #0
 80038e6:	2000      	movs	r0, #0
 80038e8:	f7fe fadc 	bl	8001ea4 <xTaskGenericNotifyWait>
 80038ec:	6138      	str	r0, [r7, #16]
 80038ee:	e7bf      	b.n	8003870 <Menu_Display_Handling_Task+0xc>
						//Do something
					}
				}
			}
			/*User option: Exit*/
			else if(cmd->cmd_payload[1] == '1')
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	785b      	ldrb	r3, [r3, #1]
 80038f4:	2b31      	cmp	r3, #49	; 0x31
 80038f6:	d10a      	bne.n	800390e <Menu_Display_Handling_Task+0xaa>
			{
				//Update the state if needed in future implementation
				//Need to implement this part
				status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80038f8:	f04f 33ff 	mov.w	r3, #4294967295
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	2300      	movs	r3, #0
 8003900:	2200      	movs	r2, #0
 8003902:	2100      	movs	r1, #0
 8003904:	2000      	movs	r0, #0
 8003906:	f7fe facd 	bl	8001ea4 <xTaskGenericNotifyWait>
 800390a:	6138      	str	r0, [r7, #16]
 800390c:	e7b0      	b.n	8003870 <Menu_Display_Handling_Task+0xc>
				}
			}
			else
			{
				/*Sending "invalid message" warning to print queue*/
				status = xQueueSend(Print_queue, (void *)&Invalid_msg , portMAX_DELAY);
 800390e:	4b0b      	ldr	r3, [pc, #44]	; (800393c <Menu_Display_Handling_Task+0xd8>)
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	2300      	movs	r3, #0
 8003914:	f04f 32ff 	mov.w	r2, #4294967295
 8003918:	490b      	ldr	r1, [pc, #44]	; (8003948 <Menu_Display_Handling_Task+0xe4>)
 800391a:	f7fc ff6d 	bl	80007f8 <xQueueGenericSend>
 800391e:	6138      	str	r0, [r7, #16]
 8003920:	e7a6      	b.n	8003870 <Menu_Display_Handling_Task+0xc>
			}
		}
		else
		{
			/*Sending "invalid message" warning to print queue*/
			status = xQueueSend(Print_queue, (void *)&Invalid_msg , portMAX_DELAY);
 8003922:	4b06      	ldr	r3, [pc, #24]	; (800393c <Menu_Display_Handling_Task+0xd8>)
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	2300      	movs	r3, #0
 8003928:	f04f 32ff 	mov.w	r2, #4294967295
 800392c:	4906      	ldr	r1, [pc, #24]	; (8003948 <Menu_Display_Handling_Task+0xe4>)
 800392e:	f7fc ff63 	bl	80007f8 <xQueueGenericSend>
 8003932:	6138      	str	r0, [r7, #16]
		status = xQueueSend(Print_queue, (void *)&menu_msg , portMAX_DELAY);
 8003934:	e79c      	b.n	8003870 <Menu_Display_Handling_Task+0xc>
 8003936:	bf00      	nop
 8003938:	0800603c 	.word	0x0800603c
 800393c:	20012db4 	.word	0x20012db4
 8003940:	20012db9 	.word	0x20012db9
 8003944:	20012da4 	.word	0x20012da4
 8003948:	2000000c 	.word	0x2000000c

0800394c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800394c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003984 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003950:	480d      	ldr	r0, [pc, #52]	; (8003988 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003952:	490e      	ldr	r1, [pc, #56]	; (800398c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003954:	4a0e      	ldr	r2, [pc, #56]	; (8003990 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003958:	e002      	b.n	8003960 <LoopCopyDataInit>

0800395a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800395a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800395c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800395e:	3304      	adds	r3, #4

08003960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003964:	d3f9      	bcc.n	800395a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003966:	4a0b      	ldr	r2, [pc, #44]	; (8003994 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003968:	4c0b      	ldr	r4, [pc, #44]	; (8003998 <LoopFillZerobss+0x26>)
  movs r3, #0
 800396a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800396c:	e001      	b.n	8003972 <LoopFillZerobss>

0800396e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800396e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003970:	3204      	adds	r2, #4

08003972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003974:	d3fb      	bcc.n	800396e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003976:	f7ff fe81 	bl	800367c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800397a:	f002 fa87 	bl	8005e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800397e:	f7ff fa5b 	bl	8002e38 <main>
  bx  lr    
 8003982:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800398c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8003990:	08006104 	.word	0x08006104
  ldr r2, =_sbss
 8003994:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8003998:	20012e08 	.word	0x20012e08

0800399c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800399c:	e7fe      	b.n	800399c <ADC_IRQHandler>
	...

080039a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039a4:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <HAL_Init+0x40>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a0d      	ldr	r2, [pc, #52]	; (80039e0 <HAL_Init+0x40>)
 80039aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_Init+0x40>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <HAL_Init+0x40>)
 80039b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039bc:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <HAL_Init+0x40>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a07      	ldr	r2, [pc, #28]	; (80039e0 <HAL_Init+0x40>)
 80039c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039c8:	2003      	movs	r0, #3
 80039ca:	f000 f8d8 	bl	8003b7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ce:	200f      	movs	r0, #15
 80039d0:	f7ff fdae 	bl	8003530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039d4:	f7ff fd34 	bl	8003440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40023c00 	.word	0x40023c00

080039e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <HAL_IncTick+0x20>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_IncTick+0x24>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4413      	add	r3, r2
 80039f4:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <HAL_IncTick+0x24>)
 80039f6:	6013      	str	r3, [r2, #0]
}
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000014 	.word	0x20000014
 8003a08:	20012e04 	.word	0x20012e04

08003a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_GetTick+0x14>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20012e04 	.word	0x20012e04

08003a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a34:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <__NVIC_SetPriorityGrouping+0x44>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a40:	4013      	ands	r3, r2
 8003a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a56:	4a04      	ldr	r2, [pc, #16]	; (8003a68 <__NVIC_SetPriorityGrouping+0x44>)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	60d3      	str	r3, [r2, #12]
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a70:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <__NVIC_GetPriorityGrouping+0x18>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	0a1b      	lsrs	r3, r3, #8
 8003a76:	f003 0307 	and.w	r3, r3, #7
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	db0b      	blt.n	8003ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	f003 021f 	and.w	r2, r3, #31
 8003aa0:	4907      	ldr	r1, [pc, #28]	; (8003ac0 <__NVIC_EnableIRQ+0x38>)
 8003aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8003aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	e000e100 	.word	0xe000e100

08003ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	6039      	str	r1, [r7, #0]
 8003ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	db0a      	blt.n	8003aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	490c      	ldr	r1, [pc, #48]	; (8003b10 <__NVIC_SetPriority+0x4c>)
 8003ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae2:	0112      	lsls	r2, r2, #4
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aec:	e00a      	b.n	8003b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	4908      	ldr	r1, [pc, #32]	; (8003b14 <__NVIC_SetPriority+0x50>)
 8003af4:	79fb      	ldrb	r3, [r7, #7]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	3b04      	subs	r3, #4
 8003afc:	0112      	lsls	r2, r2, #4
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	440b      	add	r3, r1
 8003b02:	761a      	strb	r2, [r3, #24]
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	e000e100 	.word	0xe000e100
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b089      	sub	sp, #36	; 0x24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f1c3 0307 	rsb	r3, r3, #7
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	bf28      	it	cs
 8003b36:	2304      	movcs	r3, #4
 8003b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	2b06      	cmp	r3, #6
 8003b40:	d902      	bls.n	8003b48 <NVIC_EncodePriority+0x30>
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	3b03      	subs	r3, #3
 8003b46:	e000      	b.n	8003b4a <NVIC_EncodePriority+0x32>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43da      	mvns	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	401a      	ands	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b60:	f04f 31ff 	mov.w	r1, #4294967295
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6a:	43d9      	mvns	r1, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b70:	4313      	orrs	r3, r2
         );
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3724      	adds	r7, #36	; 0x24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff ff4c 	bl	8003a24 <__NVIC_SetPriorityGrouping>
}
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ba6:	f7ff ff61 	bl	8003a6c <__NVIC_GetPriorityGrouping>
 8003baa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	68b9      	ldr	r1, [r7, #8]
 8003bb0:	6978      	ldr	r0, [r7, #20]
 8003bb2:	f7ff ffb1 	bl	8003b18 <NVIC_EncodePriority>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff ff80 	bl	8003ac4 <__NVIC_SetPriority>
}
 8003bc4:	bf00      	nop
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff ff54 	bl	8003a88 <__NVIC_EnableIRQ>
}
 8003be0:	bf00      	nop
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bf6:	f7ff ff09 	bl	8003a0c <HAL_GetTick>
 8003bfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d008      	beq.n	8003c1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2280      	movs	r2, #128	; 0x80
 8003c0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e052      	b.n	8003cc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0216 	bic.w	r2, r2, #22
 8003c28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d103      	bne.n	8003c4a <HAL_DMA_Abort+0x62>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0208 	bic.w	r2, r2, #8
 8003c58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c6a:	e013      	b.n	8003c94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c6c:	f7ff fece 	bl	8003a0c <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b05      	cmp	r3, #5
 8003c78:	d90c      	bls.n	8003c94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2203      	movs	r2, #3
 8003c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e015      	b.n	8003cc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1e4      	bne.n	8003c6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca6:	223f      	movs	r2, #63	; 0x3f
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d004      	beq.n	8003ce6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2280      	movs	r2, #128	; 0x80
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e00c      	b.n	8003d00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2205      	movs	r2, #5
 8003cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b089      	sub	sp, #36	; 0x24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
 8003d26:	e16b      	b.n	8004000 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d28:	2201      	movs	r2, #1
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	f040 815a 	bne.w	8003ffa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d005      	beq.n	8003d5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d130      	bne.n	8003dc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	2203      	movs	r2, #3
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4013      	ands	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d94:	2201      	movs	r2, #1
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	091b      	lsrs	r3, r3, #4
 8003daa:	f003 0201 	and.w	r2, r3, #1
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	d017      	beq.n	8003dfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d123      	bne.n	8003e50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	08da      	lsrs	r2, r3, #3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3208      	adds	r2, #8
 8003e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	220f      	movs	r2, #15
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	08da      	lsrs	r2, r3, #3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3208      	adds	r2, #8
 8003e4a:	69b9      	ldr	r1, [r7, #24]
 8003e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4013      	ands	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 0203 	and.w	r2, r3, #3
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80b4 	beq.w	8003ffa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	4b60      	ldr	r3, [pc, #384]	; (8004018 <HAL_GPIO_Init+0x30c>)
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	4a5f      	ldr	r2, [pc, #380]	; (8004018 <HAL_GPIO_Init+0x30c>)
 8003e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ea2:	4b5d      	ldr	r3, [pc, #372]	; (8004018 <HAL_GPIO_Init+0x30c>)
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eae:	4a5b      	ldr	r2, [pc, #364]	; (800401c <HAL_GPIO_Init+0x310>)
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	089b      	lsrs	r3, r3, #2
 8003eb4:	3302      	adds	r3, #2
 8003eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	220f      	movs	r2, #15
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a52      	ldr	r2, [pc, #328]	; (8004020 <HAL_GPIO_Init+0x314>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d02b      	beq.n	8003f32 <HAL_GPIO_Init+0x226>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a51      	ldr	r2, [pc, #324]	; (8004024 <HAL_GPIO_Init+0x318>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d025      	beq.n	8003f2e <HAL_GPIO_Init+0x222>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a50      	ldr	r2, [pc, #320]	; (8004028 <HAL_GPIO_Init+0x31c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d01f      	beq.n	8003f2a <HAL_GPIO_Init+0x21e>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a4f      	ldr	r2, [pc, #316]	; (800402c <HAL_GPIO_Init+0x320>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d019      	beq.n	8003f26 <HAL_GPIO_Init+0x21a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a4e      	ldr	r2, [pc, #312]	; (8004030 <HAL_GPIO_Init+0x324>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_GPIO_Init+0x216>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a4d      	ldr	r2, [pc, #308]	; (8004034 <HAL_GPIO_Init+0x328>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00d      	beq.n	8003f1e <HAL_GPIO_Init+0x212>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a4c      	ldr	r2, [pc, #304]	; (8004038 <HAL_GPIO_Init+0x32c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d007      	beq.n	8003f1a <HAL_GPIO_Init+0x20e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a4b      	ldr	r2, [pc, #300]	; (800403c <HAL_GPIO_Init+0x330>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <HAL_GPIO_Init+0x20a>
 8003f12:	2307      	movs	r3, #7
 8003f14:	e00e      	b.n	8003f34 <HAL_GPIO_Init+0x228>
 8003f16:	2308      	movs	r3, #8
 8003f18:	e00c      	b.n	8003f34 <HAL_GPIO_Init+0x228>
 8003f1a:	2306      	movs	r3, #6
 8003f1c:	e00a      	b.n	8003f34 <HAL_GPIO_Init+0x228>
 8003f1e:	2305      	movs	r3, #5
 8003f20:	e008      	b.n	8003f34 <HAL_GPIO_Init+0x228>
 8003f22:	2304      	movs	r3, #4
 8003f24:	e006      	b.n	8003f34 <HAL_GPIO_Init+0x228>
 8003f26:	2303      	movs	r3, #3
 8003f28:	e004      	b.n	8003f34 <HAL_GPIO_Init+0x228>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e002      	b.n	8003f34 <HAL_GPIO_Init+0x228>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <HAL_GPIO_Init+0x228>
 8003f32:	2300      	movs	r3, #0
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	f002 0203 	and.w	r2, r2, #3
 8003f3a:	0092      	lsls	r2, r2, #2
 8003f3c:	4093      	lsls	r3, r2
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f44:	4935      	ldr	r1, [pc, #212]	; (800401c <HAL_GPIO_Init+0x310>)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	089b      	lsrs	r3, r3, #2
 8003f4a:	3302      	adds	r3, #2
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f52:	4b3b      	ldr	r3, [pc, #236]	; (8004040 <HAL_GPIO_Init+0x334>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f76:	4a32      	ldr	r2, [pc, #200]	; (8004040 <HAL_GPIO_Init+0x334>)
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f7c:	4b30      	ldr	r3, [pc, #192]	; (8004040 <HAL_GPIO_Init+0x334>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	43db      	mvns	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fa0:	4a27      	ldr	r2, [pc, #156]	; (8004040 <HAL_GPIO_Init+0x334>)
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fa6:	4b26      	ldr	r3, [pc, #152]	; (8004040 <HAL_GPIO_Init+0x334>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fca:	4a1d      	ldr	r2, [pc, #116]	; (8004040 <HAL_GPIO_Init+0x334>)
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <HAL_GPIO_Init+0x334>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ff4:	4a12      	ldr	r2, [pc, #72]	; (8004040 <HAL_GPIO_Init+0x334>)
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	61fb      	str	r3, [r7, #28]
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	2b0f      	cmp	r3, #15
 8004004:	f67f ae90 	bls.w	8003d28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004008:	bf00      	nop
 800400a:	bf00      	nop
 800400c:	3724      	adds	r7, #36	; 0x24
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800
 800401c:	40013800 	.word	0x40013800
 8004020:	40020000 	.word	0x40020000
 8004024:	40020400 	.word	0x40020400
 8004028:	40020800 	.word	0x40020800
 800402c:	40020c00 	.word	0x40020c00
 8004030:	40021000 	.word	0x40021000
 8004034:	40021400 	.word	0x40021400
 8004038:	40021800 	.word	0x40021800
 800403c:	40021c00 	.word	0x40021c00
 8004040:	40013c00 	.word	0x40013c00

08004044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	807b      	strh	r3, [r7, #2]
 8004050:	4613      	mov	r3, r2
 8004052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004054:	787b      	ldrb	r3, [r7, #1]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800405a:	887a      	ldrh	r2, [r7, #2]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004060:	e003      	b.n	800406a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004062:	887b      	ldrh	r3, [r7, #2]
 8004064:	041a      	lsls	r2, r3, #16
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	619a      	str	r2, [r3, #24]
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004076:	b480      	push	{r7}
 8004078:	b085      	sub	sp, #20
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	460b      	mov	r3, r1
 8004080:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004088:	887a      	ldrh	r2, [r7, #2]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4013      	ands	r3, r2
 800408e:	041a      	lsls	r2, r3, #16
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	43d9      	mvns	r1, r3
 8004094:	887b      	ldrh	r3, [r7, #2]
 8004096:	400b      	ands	r3, r1
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	619a      	str	r2, [r3, #24]
}
 800409e:	bf00      	nop
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
	...

080040ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e267      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d075      	beq.n	80041b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ca:	4b88      	ldr	r3, [pc, #544]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d00c      	beq.n	80040f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040d6:	4b85      	ldr	r3, [pc, #532]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d112      	bne.n	8004108 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040e2:	4b82      	ldr	r3, [pc, #520]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ee:	d10b      	bne.n	8004108 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f0:	4b7e      	ldr	r3, [pc, #504]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d05b      	beq.n	80041b4 <HAL_RCC_OscConfig+0x108>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d157      	bne.n	80041b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e242      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004110:	d106      	bne.n	8004120 <HAL_RCC_OscConfig+0x74>
 8004112:	4b76      	ldr	r3, [pc, #472]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a75      	ldr	r2, [pc, #468]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e01d      	b.n	800415c <HAL_RCC_OscConfig+0xb0>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004128:	d10c      	bne.n	8004144 <HAL_RCC_OscConfig+0x98>
 800412a:	4b70      	ldr	r3, [pc, #448]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a6f      	ldr	r2, [pc, #444]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	4b6d      	ldr	r3, [pc, #436]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a6c      	ldr	r2, [pc, #432]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 800413c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e00b      	b.n	800415c <HAL_RCC_OscConfig+0xb0>
 8004144:	4b69      	ldr	r3, [pc, #420]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a68      	ldr	r2, [pc, #416]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 800414a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	4b66      	ldr	r3, [pc, #408]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a65      	ldr	r2, [pc, #404]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800415a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d013      	beq.n	800418c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004164:	f7ff fc52 	bl	8003a0c <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800416c:	f7ff fc4e 	bl	8003a0c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	; 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e207      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417e:	4b5b      	ldr	r3, [pc, #364]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0xc0>
 800418a:	e014      	b.n	80041b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418c:	f7ff fc3e 	bl	8003a0c <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004194:	f7ff fc3a 	bl	8003a0c <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	; 0x64
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e1f3      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041a6:	4b51      	ldr	r3, [pc, #324]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0xe8>
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d063      	beq.n	800428a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041c2:	4b4a      	ldr	r3, [pc, #296]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00b      	beq.n	80041e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ce:	4b47      	ldr	r3, [pc, #284]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d11c      	bne.n	8004214 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041da:	4b44      	ldr	r3, [pc, #272]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d116      	bne.n	8004214 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e6:	4b41      	ldr	r3, [pc, #260]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <HAL_RCC_OscConfig+0x152>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d001      	beq.n	80041fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e1c7      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041fe:	4b3b      	ldr	r3, [pc, #236]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	4937      	ldr	r1, [pc, #220]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 800420e:	4313      	orrs	r3, r2
 8004210:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004212:	e03a      	b.n	800428a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d020      	beq.n	800425e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800421c:	4b34      	ldr	r3, [pc, #208]	; (80042f0 <HAL_RCC_OscConfig+0x244>)
 800421e:	2201      	movs	r2, #1
 8004220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004222:	f7ff fbf3 	bl	8003a0c <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800422a:	f7ff fbef 	bl	8003a0c <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e1a8      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423c:	4b2b      	ldr	r3, [pc, #172]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004248:	4b28      	ldr	r3, [pc, #160]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	4925      	ldr	r1, [pc, #148]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004258:	4313      	orrs	r3, r2
 800425a:	600b      	str	r3, [r1, #0]
 800425c:	e015      	b.n	800428a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800425e:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <HAL_RCC_OscConfig+0x244>)
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7ff fbd2 	bl	8003a0c <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800426c:	f7ff fbce 	bl	8003a0c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e187      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427e:	4b1b      	ldr	r3, [pc, #108]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d036      	beq.n	8004304 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d016      	beq.n	80042cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800429e:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <HAL_RCC_OscConfig+0x248>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a4:	f7ff fbb2 	bl	8003a0c <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ac:	f7ff fbae 	bl	8003a0c <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e167      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042be:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80042c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0x200>
 80042ca:	e01b      	b.n	8004304 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <HAL_RCC_OscConfig+0x248>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d2:	f7ff fb9b 	bl	8003a0c <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d8:	e00e      	b.n	80042f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042da:	f7ff fb97 	bl	8003a0c <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d907      	bls.n	80042f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e150      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
 80042ec:	40023800 	.word	0x40023800
 80042f0:	42470000 	.word	0x42470000
 80042f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f8:	4b88      	ldr	r3, [pc, #544]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80042fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1ea      	bne.n	80042da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 8097 	beq.w	8004440 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004312:	2300      	movs	r3, #0
 8004314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004316:	4b81      	ldr	r3, [pc, #516]	; (800451c <HAL_RCC_OscConfig+0x470>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10f      	bne.n	8004342 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	4b7d      	ldr	r3, [pc, #500]	; (800451c <HAL_RCC_OscConfig+0x470>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	4a7c      	ldr	r2, [pc, #496]	; (800451c <HAL_RCC_OscConfig+0x470>)
 800432c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004330:	6413      	str	r3, [r2, #64]	; 0x40
 8004332:	4b7a      	ldr	r3, [pc, #488]	; (800451c <HAL_RCC_OscConfig+0x470>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433a:	60bb      	str	r3, [r7, #8]
 800433c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800433e:	2301      	movs	r3, #1
 8004340:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004342:	4b77      	ldr	r3, [pc, #476]	; (8004520 <HAL_RCC_OscConfig+0x474>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434a:	2b00      	cmp	r3, #0
 800434c:	d118      	bne.n	8004380 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800434e:	4b74      	ldr	r3, [pc, #464]	; (8004520 <HAL_RCC_OscConfig+0x474>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a73      	ldr	r2, [pc, #460]	; (8004520 <HAL_RCC_OscConfig+0x474>)
 8004354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800435a:	f7ff fb57 	bl	8003a0c <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004362:	f7ff fb53 	bl	8003a0c <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e10c      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004374:	4b6a      	ldr	r3, [pc, #424]	; (8004520 <HAL_RCC_OscConfig+0x474>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d106      	bne.n	8004396 <HAL_RCC_OscConfig+0x2ea>
 8004388:	4b64      	ldr	r3, [pc, #400]	; (800451c <HAL_RCC_OscConfig+0x470>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438c:	4a63      	ldr	r2, [pc, #396]	; (800451c <HAL_RCC_OscConfig+0x470>)
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	6713      	str	r3, [r2, #112]	; 0x70
 8004394:	e01c      	b.n	80043d0 <HAL_RCC_OscConfig+0x324>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b05      	cmp	r3, #5
 800439c:	d10c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x30c>
 800439e:	4b5f      	ldr	r3, [pc, #380]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	4a5e      	ldr	r2, [pc, #376]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80043a4:	f043 0304 	orr.w	r3, r3, #4
 80043a8:	6713      	str	r3, [r2, #112]	; 0x70
 80043aa:	4b5c      	ldr	r3, [pc, #368]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	4a5b      	ldr	r2, [pc, #364]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	6713      	str	r3, [r2, #112]	; 0x70
 80043b6:	e00b      	b.n	80043d0 <HAL_RCC_OscConfig+0x324>
 80043b8:	4b58      	ldr	r3, [pc, #352]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	4a57      	ldr	r2, [pc, #348]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80043be:	f023 0301 	bic.w	r3, r3, #1
 80043c2:	6713      	str	r3, [r2, #112]	; 0x70
 80043c4:	4b55      	ldr	r3, [pc, #340]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80043c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c8:	4a54      	ldr	r2, [pc, #336]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80043ca:	f023 0304 	bic.w	r3, r3, #4
 80043ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d015      	beq.n	8004404 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d8:	f7ff fb18 	bl	8003a0c <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043de:	e00a      	b.n	80043f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e0:	f7ff fb14 	bl	8003a0c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e0cb      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f6:	4b49      	ldr	r3, [pc, #292]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0ee      	beq.n	80043e0 <HAL_RCC_OscConfig+0x334>
 8004402:	e014      	b.n	800442e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004404:	f7ff fb02 	bl	8003a0c <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440a:	e00a      	b.n	8004422 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800440c:	f7ff fafe 	bl	8003a0c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	f241 3288 	movw	r2, #5000	; 0x1388
 800441a:	4293      	cmp	r3, r2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e0b5      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004422:	4b3e      	ldr	r3, [pc, #248]	; (800451c <HAL_RCC_OscConfig+0x470>)
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1ee      	bne.n	800440c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800442e:	7dfb      	ldrb	r3, [r7, #23]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d105      	bne.n	8004440 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004434:	4b39      	ldr	r3, [pc, #228]	; (800451c <HAL_RCC_OscConfig+0x470>)
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	4a38      	ldr	r2, [pc, #224]	; (800451c <HAL_RCC_OscConfig+0x470>)
 800443a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800443e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80a1 	beq.w	800458c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800444a:	4b34      	ldr	r3, [pc, #208]	; (800451c <HAL_RCC_OscConfig+0x470>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b08      	cmp	r3, #8
 8004454:	d05c      	beq.n	8004510 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d141      	bne.n	80044e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445e:	4b31      	ldr	r3, [pc, #196]	; (8004524 <HAL_RCC_OscConfig+0x478>)
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004464:	f7ff fad2 	bl	8003a0c <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800446c:	f7ff face 	bl	8003a0c <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e087      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447e:	4b27      	ldr	r3, [pc, #156]	; (800451c <HAL_RCC_OscConfig+0x470>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69da      	ldr	r2, [r3, #28]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	019b      	lsls	r3, r3, #6
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	3b01      	subs	r3, #1
 80044a4:	041b      	lsls	r3, r3, #16
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	061b      	lsls	r3, r3, #24
 80044ae:	491b      	ldr	r1, [pc, #108]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b4:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <HAL_RCC_OscConfig+0x478>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ba:	f7ff faa7 	bl	8003a0c <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c2:	f7ff faa3 	bl	8003a0c <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e05c      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d4:	4b11      	ldr	r3, [pc, #68]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x416>
 80044e0:	e054      	b.n	800458c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e2:	4b10      	ldr	r3, [pc, #64]	; (8004524 <HAL_RCC_OscConfig+0x478>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e8:	f7ff fa90 	bl	8003a0c <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f0:	f7ff fa8c 	bl	8003a0c <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e045      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004502:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_RCC_OscConfig+0x470>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x444>
 800450e:	e03d      	b.n	800458c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d107      	bne.n	8004528 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e038      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
 800451c:	40023800 	.word	0x40023800
 8004520:	40007000 	.word	0x40007000
 8004524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004528:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <HAL_RCC_OscConfig+0x4ec>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d028      	beq.n	8004588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004540:	429a      	cmp	r2, r3
 8004542:	d121      	bne.n	8004588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454e:	429a      	cmp	r2, r3
 8004550:	d11a      	bne.n	8004588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004558:	4013      	ands	r3, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800455e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004560:	4293      	cmp	r3, r2
 8004562:	d111      	bne.n	8004588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456e:	085b      	lsrs	r3, r3, #1
 8004570:	3b01      	subs	r3, #1
 8004572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004574:	429a      	cmp	r2, r3
 8004576:	d107      	bne.n	8004588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800

0800459c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e0cc      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045b0:	4b68      	ldr	r3, [pc, #416]	; (8004754 <HAL_RCC_ClockConfig+0x1b8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d90c      	bls.n	80045d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045be:	4b65      	ldr	r3, [pc, #404]	; (8004754 <HAL_RCC_ClockConfig+0x1b8>)
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c6:	4b63      	ldr	r3, [pc, #396]	; (8004754 <HAL_RCC_ClockConfig+0x1b8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d001      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e0b8      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d020      	beq.n	8004626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045f0:	4b59      	ldr	r3, [pc, #356]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	4a58      	ldr	r2, [pc, #352]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004608:	4b53      	ldr	r3, [pc, #332]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	4a52      	ldr	r2, [pc, #328]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004614:	4b50      	ldr	r3, [pc, #320]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	494d      	ldr	r1, [pc, #308]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	4313      	orrs	r3, r2
 8004624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d044      	beq.n	80046bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d107      	bne.n	800464a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463a:	4b47      	ldr	r3, [pc, #284]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d119      	bne.n	800467a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e07f      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d003      	beq.n	800465a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004656:	2b03      	cmp	r3, #3
 8004658:	d107      	bne.n	800466a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465a:	4b3f      	ldr	r3, [pc, #252]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e06f      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466a:	4b3b      	ldr	r3, [pc, #236]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e067      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800467a:	4b37      	ldr	r3, [pc, #220]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f023 0203 	bic.w	r2, r3, #3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	4934      	ldr	r1, [pc, #208]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 8004688:	4313      	orrs	r3, r2
 800468a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800468c:	f7ff f9be 	bl	8003a0c <HAL_GetTick>
 8004690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004692:	e00a      	b.n	80046aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004694:	f7ff f9ba 	bl	8003a0c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e04f      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046aa:	4b2b      	ldr	r3, [pc, #172]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 020c 	and.w	r2, r3, #12
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d1eb      	bne.n	8004694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046bc:	4b25      	ldr	r3, [pc, #148]	; (8004754 <HAL_RCC_ClockConfig+0x1b8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d20c      	bcs.n	80046e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ca:	4b22      	ldr	r3, [pc, #136]	; (8004754 <HAL_RCC_ClockConfig+0x1b8>)
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d2:	4b20      	ldr	r3, [pc, #128]	; (8004754 <HAL_RCC_ClockConfig+0x1b8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d001      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e032      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046f0:	4b19      	ldr	r3, [pc, #100]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4916      	ldr	r1, [pc, #88]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800470e:	4b12      	ldr	r3, [pc, #72]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	490e      	ldr	r1, [pc, #56]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004722:	f000 f821 	bl	8004768 <HAL_RCC_GetSysClockFreq>
 8004726:	4602      	mov	r2, r0
 8004728:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	091b      	lsrs	r3, r3, #4
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	490a      	ldr	r1, [pc, #40]	; (800475c <HAL_RCC_ClockConfig+0x1c0>)
 8004734:	5ccb      	ldrb	r3, [r1, r3]
 8004736:	fa22 f303 	lsr.w	r3, r2, r3
 800473a:	4a09      	ldr	r2, [pc, #36]	; (8004760 <HAL_RCC_ClockConfig+0x1c4>)
 800473c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800473e:	4b09      	ldr	r3, [pc, #36]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7fe fef4 	bl	8003530 <HAL_InitTick>

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40023c00 	.word	0x40023c00
 8004758:	40023800 	.word	0x40023800
 800475c:	080060dc 	.word	0x080060dc
 8004760:	20000008 	.word	0x20000008
 8004764:	20000010 	.word	0x20000010

08004768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800476c:	b094      	sub	sp, #80	; 0x50
 800476e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	647b      	str	r3, [r7, #68]	; 0x44
 8004774:	2300      	movs	r3, #0
 8004776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004778:	2300      	movs	r3, #0
 800477a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004780:	4b79      	ldr	r3, [pc, #484]	; (8004968 <HAL_RCC_GetSysClockFreq+0x200>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 030c 	and.w	r3, r3, #12
 8004788:	2b08      	cmp	r3, #8
 800478a:	d00d      	beq.n	80047a8 <HAL_RCC_GetSysClockFreq+0x40>
 800478c:	2b08      	cmp	r3, #8
 800478e:	f200 80e1 	bhi.w	8004954 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <HAL_RCC_GetSysClockFreq+0x34>
 8004796:	2b04      	cmp	r3, #4
 8004798:	d003      	beq.n	80047a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800479a:	e0db      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800479c:	4b73      	ldr	r3, [pc, #460]	; (800496c <HAL_RCC_GetSysClockFreq+0x204>)
 800479e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80047a0:	e0db      	b.n	800495a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047a2:	4b73      	ldr	r3, [pc, #460]	; (8004970 <HAL_RCC_GetSysClockFreq+0x208>)
 80047a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047a6:	e0d8      	b.n	800495a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047a8:	4b6f      	ldr	r3, [pc, #444]	; (8004968 <HAL_RCC_GetSysClockFreq+0x200>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047b2:	4b6d      	ldr	r3, [pc, #436]	; (8004968 <HAL_RCC_GetSysClockFreq+0x200>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d063      	beq.n	8004886 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047be:	4b6a      	ldr	r3, [pc, #424]	; (8004968 <HAL_RCC_GetSysClockFreq+0x200>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	099b      	lsrs	r3, r3, #6
 80047c4:	2200      	movs	r2, #0
 80047c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80047c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d0:	633b      	str	r3, [r7, #48]	; 0x30
 80047d2:	2300      	movs	r3, #0
 80047d4:	637b      	str	r3, [r7, #52]	; 0x34
 80047d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047da:	4622      	mov	r2, r4
 80047dc:	462b      	mov	r3, r5
 80047de:	f04f 0000 	mov.w	r0, #0
 80047e2:	f04f 0100 	mov.w	r1, #0
 80047e6:	0159      	lsls	r1, r3, #5
 80047e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047ec:	0150      	lsls	r0, r2, #5
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4621      	mov	r1, r4
 80047f4:	1a51      	subs	r1, r2, r1
 80047f6:	6139      	str	r1, [r7, #16]
 80047f8:	4629      	mov	r1, r5
 80047fa:	eb63 0301 	sbc.w	r3, r3, r1
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800480c:	4659      	mov	r1, fp
 800480e:	018b      	lsls	r3, r1, #6
 8004810:	4651      	mov	r1, sl
 8004812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004816:	4651      	mov	r1, sl
 8004818:	018a      	lsls	r2, r1, #6
 800481a:	4651      	mov	r1, sl
 800481c:	ebb2 0801 	subs.w	r8, r2, r1
 8004820:	4659      	mov	r1, fp
 8004822:	eb63 0901 	sbc.w	r9, r3, r1
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004832:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004836:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800483a:	4690      	mov	r8, r2
 800483c:	4699      	mov	r9, r3
 800483e:	4623      	mov	r3, r4
 8004840:	eb18 0303 	adds.w	r3, r8, r3
 8004844:	60bb      	str	r3, [r7, #8]
 8004846:	462b      	mov	r3, r5
 8004848:	eb49 0303 	adc.w	r3, r9, r3
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800485a:	4629      	mov	r1, r5
 800485c:	024b      	lsls	r3, r1, #9
 800485e:	4621      	mov	r1, r4
 8004860:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004864:	4621      	mov	r1, r4
 8004866:	024a      	lsls	r2, r1, #9
 8004868:	4610      	mov	r0, r2
 800486a:	4619      	mov	r1, r3
 800486c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800486e:	2200      	movs	r2, #0
 8004870:	62bb      	str	r3, [r7, #40]	; 0x28
 8004872:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004874:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004878:	f7fb fcaa 	bl	80001d0 <__aeabi_uldivmod>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4613      	mov	r3, r2
 8004882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004884:	e058      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004886:	4b38      	ldr	r3, [pc, #224]	; (8004968 <HAL_RCC_GetSysClockFreq+0x200>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	099b      	lsrs	r3, r3, #6
 800488c:	2200      	movs	r2, #0
 800488e:	4618      	mov	r0, r3
 8004890:	4611      	mov	r1, r2
 8004892:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004896:	623b      	str	r3, [r7, #32]
 8004898:	2300      	movs	r3, #0
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
 800489c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048a0:	4642      	mov	r2, r8
 80048a2:	464b      	mov	r3, r9
 80048a4:	f04f 0000 	mov.w	r0, #0
 80048a8:	f04f 0100 	mov.w	r1, #0
 80048ac:	0159      	lsls	r1, r3, #5
 80048ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048b2:	0150      	lsls	r0, r2, #5
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4641      	mov	r1, r8
 80048ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80048be:	4649      	mov	r1, r9
 80048c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048d8:	ebb2 040a 	subs.w	r4, r2, sl
 80048dc:	eb63 050b 	sbc.w	r5, r3, fp
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	00eb      	lsls	r3, r5, #3
 80048ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ee:	00e2      	lsls	r2, r4, #3
 80048f0:	4614      	mov	r4, r2
 80048f2:	461d      	mov	r5, r3
 80048f4:	4643      	mov	r3, r8
 80048f6:	18e3      	adds	r3, r4, r3
 80048f8:	603b      	str	r3, [r7, #0]
 80048fa:	464b      	mov	r3, r9
 80048fc:	eb45 0303 	adc.w	r3, r5, r3
 8004900:	607b      	str	r3, [r7, #4]
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800490e:	4629      	mov	r1, r5
 8004910:	028b      	lsls	r3, r1, #10
 8004912:	4621      	mov	r1, r4
 8004914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004918:	4621      	mov	r1, r4
 800491a:	028a      	lsls	r2, r1, #10
 800491c:	4610      	mov	r0, r2
 800491e:	4619      	mov	r1, r3
 8004920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004922:	2200      	movs	r2, #0
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	61fa      	str	r2, [r7, #28]
 8004928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800492c:	f7fb fc50 	bl	80001d0 <__aeabi_uldivmod>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4613      	mov	r3, r2
 8004936:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCC_GetSysClockFreq+0x200>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	0c1b      	lsrs	r3, r3, #16
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	3301      	adds	r3, #1
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004948:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800494a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800494c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004950:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004952:	e002      	b.n	800495a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004954:	4b05      	ldr	r3, [pc, #20]	; (800496c <HAL_RCC_GetSysClockFreq+0x204>)
 8004956:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800495a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800495c:	4618      	mov	r0, r3
 800495e:	3750      	adds	r7, #80	; 0x50
 8004960:	46bd      	mov	sp, r7
 8004962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004966:	bf00      	nop
 8004968:	40023800 	.word	0x40023800
 800496c:	00f42400 	.word	0x00f42400
 8004970:	007a1200 	.word	0x007a1200

08004974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004978:	4b03      	ldr	r3, [pc, #12]	; (8004988 <HAL_RCC_GetHCLKFreq+0x14>)
 800497a:	681b      	ldr	r3, [r3, #0]
}
 800497c:	4618      	mov	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20000008 	.word	0x20000008

0800498c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004990:	f7ff fff0 	bl	8004974 <HAL_RCC_GetHCLKFreq>
 8004994:	4602      	mov	r2, r0
 8004996:	4b05      	ldr	r3, [pc, #20]	; (80049ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	0a9b      	lsrs	r3, r3, #10
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	4903      	ldr	r1, [pc, #12]	; (80049b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049a2:	5ccb      	ldrb	r3, [r1, r3]
 80049a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40023800 	.word	0x40023800
 80049b0:	080060ec 	.word	0x080060ec

080049b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049b8:	f7ff ffdc 	bl	8004974 <HAL_RCC_GetHCLKFreq>
 80049bc:	4602      	mov	r2, r0
 80049be:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	0b5b      	lsrs	r3, r3, #13
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	4903      	ldr	r1, [pc, #12]	; (80049d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ca:	5ccb      	ldrb	r3, [r1, r3]
 80049cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40023800 	.word	0x40023800
 80049d8:	080060ec 	.word	0x080060ec

080049dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	220f      	movs	r2, #15
 80049ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049ec:	4b12      	ldr	r3, [pc, #72]	; (8004a38 <HAL_RCC_GetClockConfig+0x5c>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 0203 	and.w	r2, r3, #3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049f8:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <HAL_RCC_GetClockConfig+0x5c>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a04:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <HAL_RCC_GetClockConfig+0x5c>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a10:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <HAL_RCC_GetClockConfig+0x5c>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	08db      	lsrs	r3, r3, #3
 8004a16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a1e:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <HAL_RCC_GetClockConfig+0x60>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0207 	and.w	r2, r3, #7
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	601a      	str	r2, [r3, #0]
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	40023c00 	.word	0x40023c00

08004a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e041      	b.n	8004ad6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f839 	bl	8004ade <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	f000 f9d8 	bl	8004e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
	...

08004af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d001      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e04e      	b.n	8004baa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0201 	orr.w	r2, r2, #1
 8004b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a23      	ldr	r2, [pc, #140]	; (8004bb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d022      	beq.n	8004b74 <HAL_TIM_Base_Start_IT+0x80>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b36:	d01d      	beq.n	8004b74 <HAL_TIM_Base_Start_IT+0x80>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a1f      	ldr	r2, [pc, #124]	; (8004bbc <HAL_TIM_Base_Start_IT+0xc8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d018      	beq.n	8004b74 <HAL_TIM_Base_Start_IT+0x80>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1e      	ldr	r2, [pc, #120]	; (8004bc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d013      	beq.n	8004b74 <HAL_TIM_Base_Start_IT+0x80>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a1c      	ldr	r2, [pc, #112]	; (8004bc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00e      	beq.n	8004b74 <HAL_TIM_Base_Start_IT+0x80>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a1b      	ldr	r2, [pc, #108]	; (8004bc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d009      	beq.n	8004b74 <HAL_TIM_Base_Start_IT+0x80>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a19      	ldr	r2, [pc, #100]	; (8004bcc <HAL_TIM_Base_Start_IT+0xd8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d004      	beq.n	8004b74 <HAL_TIM_Base_Start_IT+0x80>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a18      	ldr	r2, [pc, #96]	; (8004bd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d111      	bne.n	8004b98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b06      	cmp	r3, #6
 8004b84:	d010      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0201 	orr.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b96:	e007      	b.n	8004ba8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0201 	orr.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40010000 	.word	0x40010000
 8004bbc:	40000400 	.word	0x40000400
 8004bc0:	40000800 	.word	0x40000800
 8004bc4:	40000c00 	.word	0x40000c00
 8004bc8:	40010400 	.word	0x40010400
 8004bcc:	40014000 	.word	0x40014000
 8004bd0:	40001800 	.word	0x40001800

08004bd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d122      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d11b      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0202 	mvn.w	r2, #2
 8004c00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f8ee 	bl	8004df8 <HAL_TIM_IC_CaptureCallback>
 8004c1c:	e005      	b.n	8004c2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f8e0 	bl	8004de4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f8f1 	bl	8004e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d122      	bne.n	8004c84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d11b      	bne.n	8004c84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0204 	mvn.w	r2, #4
 8004c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2202      	movs	r2, #2
 8004c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f8c4 	bl	8004df8 <HAL_TIM_IC_CaptureCallback>
 8004c70:	e005      	b.n	8004c7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f8b6 	bl	8004de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f8c7 	bl	8004e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d122      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d11b      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0208 	mvn.w	r2, #8
 8004ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2204      	movs	r2, #4
 8004cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f89a 	bl	8004df8 <HAL_TIM_IC_CaptureCallback>
 8004cc4:	e005      	b.n	8004cd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f88c 	bl	8004de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f89d 	bl	8004e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f003 0310 	and.w	r3, r3, #16
 8004ce2:	2b10      	cmp	r3, #16
 8004ce4:	d122      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b10      	cmp	r3, #16
 8004cf2:	d11b      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0210 	mvn.w	r2, #16
 8004cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2208      	movs	r2, #8
 8004d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f870 	bl	8004df8 <HAL_TIM_IC_CaptureCallback>
 8004d18:	e005      	b.n	8004d26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f862 	bl	8004de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f873 	bl	8004e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d10e      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d107      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0201 	mvn.w	r2, #1
 8004d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fe fb5c 	bl	8003410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d62:	2b80      	cmp	r3, #128	; 0x80
 8004d64:	d10e      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d70:	2b80      	cmp	r3, #128	; 0x80
 8004d72:	d107      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f902 	bl	8004f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8e:	2b40      	cmp	r3, #64	; 0x40
 8004d90:	d10e      	bne.n	8004db0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b40      	cmp	r3, #64	; 0x40
 8004d9e:	d107      	bne.n	8004db0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f838 	bl	8004e20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b20      	cmp	r3, #32
 8004dbc:	d10e      	bne.n	8004ddc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d107      	bne.n	8004ddc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f06f 0220 	mvn.w	r2, #32
 8004dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f8cc 	bl	8004f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ddc:	bf00      	nop
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a40      	ldr	r2, [pc, #256]	; (8004f48 <TIM_Base_SetConfig+0x114>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d013      	beq.n	8004e74 <TIM_Base_SetConfig+0x40>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e52:	d00f      	beq.n	8004e74 <TIM_Base_SetConfig+0x40>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a3d      	ldr	r2, [pc, #244]	; (8004f4c <TIM_Base_SetConfig+0x118>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00b      	beq.n	8004e74 <TIM_Base_SetConfig+0x40>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a3c      	ldr	r2, [pc, #240]	; (8004f50 <TIM_Base_SetConfig+0x11c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d007      	beq.n	8004e74 <TIM_Base_SetConfig+0x40>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a3b      	ldr	r2, [pc, #236]	; (8004f54 <TIM_Base_SetConfig+0x120>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d003      	beq.n	8004e74 <TIM_Base_SetConfig+0x40>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a3a      	ldr	r2, [pc, #232]	; (8004f58 <TIM_Base_SetConfig+0x124>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d108      	bne.n	8004e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a2f      	ldr	r2, [pc, #188]	; (8004f48 <TIM_Base_SetConfig+0x114>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d02b      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e94:	d027      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a2c      	ldr	r2, [pc, #176]	; (8004f4c <TIM_Base_SetConfig+0x118>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d023      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a2b      	ldr	r2, [pc, #172]	; (8004f50 <TIM_Base_SetConfig+0x11c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d01f      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a2a      	ldr	r2, [pc, #168]	; (8004f54 <TIM_Base_SetConfig+0x120>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d01b      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a29      	ldr	r2, [pc, #164]	; (8004f58 <TIM_Base_SetConfig+0x124>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d017      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a28      	ldr	r2, [pc, #160]	; (8004f5c <TIM_Base_SetConfig+0x128>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d013      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a27      	ldr	r2, [pc, #156]	; (8004f60 <TIM_Base_SetConfig+0x12c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00f      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a26      	ldr	r2, [pc, #152]	; (8004f64 <TIM_Base_SetConfig+0x130>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00b      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a25      	ldr	r2, [pc, #148]	; (8004f68 <TIM_Base_SetConfig+0x134>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d007      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a24      	ldr	r2, [pc, #144]	; (8004f6c <TIM_Base_SetConfig+0x138>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d003      	beq.n	8004ee6 <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a23      	ldr	r2, [pc, #140]	; (8004f70 <TIM_Base_SetConfig+0x13c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d108      	bne.n	8004ef8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <TIM_Base_SetConfig+0x114>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d003      	beq.n	8004f2c <TIM_Base_SetConfig+0xf8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a0c      	ldr	r2, [pc, #48]	; (8004f58 <TIM_Base_SetConfig+0x124>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d103      	bne.n	8004f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	615a      	str	r2, [r3, #20]
}
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40010000 	.word	0x40010000
 8004f4c:	40000400 	.word	0x40000400
 8004f50:	40000800 	.word	0x40000800
 8004f54:	40000c00 	.word	0x40000c00
 8004f58:	40010400 	.word	0x40010400
 8004f5c:	40014000 	.word	0x40014000
 8004f60:	40014400 	.word	0x40014400
 8004f64:	40014800 	.word	0x40014800
 8004f68:	40001800 	.word	0x40001800
 8004f6c:	40001c00 	.word	0x40001c00
 8004f70:	40002000 	.word	0x40002000

08004f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e03f      	b.n	800502e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fe fa64 	bl	8003490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2224      	movs	r2, #36	; 0x24
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fcdf 	bl	80059a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695a      	ldr	r2, [r3, #20]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	60f8      	str	r0, [r7, #12]
 800503e:	60b9      	str	r1, [r7, #8]
 8005040:	4613      	mov	r3, r2
 8005042:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b20      	cmp	r3, #32
 800504e:	d11d      	bne.n	800508c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <HAL_UART_Receive_IT+0x26>
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e016      	b.n	800508e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <HAL_UART_Receive_IT+0x38>
 800506a:	2302      	movs	r3, #2
 800506c:	e00f      	b.n	800508e <HAL_UART_Receive_IT+0x58>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800507c:	88fb      	ldrh	r3, [r7, #6]
 800507e:	461a      	mov	r2, r3
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 fab6 	bl	80055f4 <UART_Start_Receive_IT>
 8005088:	4603      	mov	r3, r0
 800508a:	e000      	b.n	800508e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800508c:	2302      	movs	r3, #2
  }
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b0ba      	sub	sp, #232	; 0xe8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80050be:	2300      	movs	r3, #0
 80050c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80050d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10f      	bne.n	80050fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <HAL_UART_IRQHandler+0x66>
 80050ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fb99 	bl	800582e <UART_Receive_IT>
      return;
 80050fc:	e256      	b.n	80055ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 80de 	beq.w	80052c4 <HAL_UART_IRQHandler+0x22c>
 8005108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d106      	bne.n	8005122 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005118:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 80d1 	beq.w	80052c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <HAL_UART_IRQHandler+0xae>
 800512e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	f043 0201 	orr.w	r2, r3, #1
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00b      	beq.n	800516a <HAL_UART_IRQHandler+0xd2>
 8005152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	f043 0202 	orr.w	r2, r3, #2
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800516a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00b      	beq.n	800518e <HAL_UART_IRQHandler+0xf6>
 8005176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	f043 0204 	orr.w	r2, r3, #4
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800518e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d011      	beq.n	80051be <HAL_UART_IRQHandler+0x126>
 800519a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d105      	bne.n	80051b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80051a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d005      	beq.n	80051be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	f043 0208 	orr.w	r2, r3, #8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 81ed 	beq.w	80055a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_UART_IRQHandler+0x14e>
 80051d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fb24 	bl	800582e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f0:	2b40      	cmp	r3, #64	; 0x40
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b00      	cmp	r3, #0
 8005208:	d103      	bne.n	8005212 <HAL_UART_IRQHandler+0x17a>
 800520a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800520e:	2b00      	cmp	r3, #0
 8005210:	d04f      	beq.n	80052b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fa2c 	bl	8005670 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005222:	2b40      	cmp	r3, #64	; 0x40
 8005224:	d141      	bne.n	80052aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	3314      	adds	r3, #20
 800522c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800523c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3314      	adds	r3, #20
 800524e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005252:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800525e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800526a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1d9      	bne.n	8005226 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	2b00      	cmp	r3, #0
 8005278:	d013      	beq.n	80052a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	4a7d      	ldr	r2, [pc, #500]	; (8005474 <HAL_UART_IRQHandler+0x3dc>)
 8005280:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005286:	4618      	mov	r0, r3
 8005288:	f7fe fd1e 	bl	8003cc8 <HAL_DMA_Abort_IT>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d016      	beq.n	80052c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800529c:	4610      	mov	r0, r2
 800529e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a0:	e00e      	b.n	80052c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f990 	bl	80055c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a8:	e00a      	b.n	80052c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f98c 	bl	80055c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b0:	e006      	b.n	80052c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f988 	bl	80055c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80052be:	e170      	b.n	80055a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c0:	bf00      	nop
    return;
 80052c2:	e16e      	b.n	80055a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	f040 814a 	bne.w	8005562 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80052ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d2:	f003 0310 	and.w	r3, r3, #16
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 8143 	beq.w	8005562 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80052dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 813c 	beq.w	8005562 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052ea:	2300      	movs	r3, #0
 80052ec:	60bb      	str	r3, [r7, #8]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	60bb      	str	r3, [r7, #8]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530a:	2b40      	cmp	r3, #64	; 0x40
 800530c:	f040 80b4 	bne.w	8005478 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800531c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 8140 	beq.w	80055a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800532a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800532e:	429a      	cmp	r2, r3
 8005330:	f080 8139 	bcs.w	80055a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800533a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005346:	f000 8088 	beq.w	800545a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	330c      	adds	r3, #12
 8005350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005354:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005360:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	330c      	adds	r3, #12
 8005372:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005376:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800537a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005382:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800538e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1d9      	bne.n	800534a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3314      	adds	r3, #20
 800539c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80053a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053a8:	f023 0301 	bic.w	r3, r3, #1
 80053ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3314      	adds	r3, #20
 80053b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80053ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80053be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80053c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80053cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e1      	bne.n	8005396 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3314      	adds	r3, #20
 80053d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80053e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3314      	adds	r3, #20
 80053f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e3      	bne.n	80053d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800542a:	f023 0310 	bic.w	r3, r3, #16
 800542e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	330c      	adds	r3, #12
 8005438:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800543c:	65ba      	str	r2, [r7, #88]	; 0x58
 800543e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005442:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800544a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e3      	bne.n	8005418 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	4618      	mov	r0, r3
 8005456:	f7fe fbc7 	bl	8003be8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005462:	b29b      	uxth	r3, r3
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	b29b      	uxth	r3, r3
 8005468:	4619      	mov	r1, r3
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f8b6 	bl	80055dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005470:	e099      	b.n	80055a6 <HAL_UART_IRQHandler+0x50e>
 8005472:	bf00      	nop
 8005474:	08005737 	.word	0x08005737
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005480:	b29b      	uxth	r3, r3
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 808b 	beq.w	80055aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005494:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 8086 	beq.w	80055aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	330c      	adds	r3, #12
 80054a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	e853 3f00 	ldrex	r3, [r3]
 80054ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80054c2:	647a      	str	r2, [r7, #68]	; 0x44
 80054c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e3      	bne.n	800549e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3314      	adds	r3, #20
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	623b      	str	r3, [r7, #32]
   return(result);
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	f023 0301 	bic.w	r3, r3, #1
 80054ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3314      	adds	r3, #20
 80054f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054fa:	633a      	str	r2, [r7, #48]	; 0x30
 80054fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e3      	bne.n	80054d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	330c      	adds	r3, #12
 8005522:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	e853 3f00 	ldrex	r3, [r3]
 800552a:	60fb      	str	r3, [r7, #12]
   return(result);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0310 	bic.w	r3, r3, #16
 8005532:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	330c      	adds	r3, #12
 800553c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005540:	61fa      	str	r2, [r7, #28]
 8005542:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005544:	69b9      	ldr	r1, [r7, #24]
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	617b      	str	r3, [r7, #20]
   return(result);
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e3      	bne.n	800551c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005558:	4619      	mov	r1, r3
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f83e 	bl	80055dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005560:	e023      	b.n	80055aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556a:	2b00      	cmp	r3, #0
 800556c:	d009      	beq.n	8005582 <HAL_UART_IRQHandler+0x4ea>
 800556e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f8ef 	bl	800575e <UART_Transmit_IT>
    return;
 8005580:	e014      	b.n	80055ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00e      	beq.n	80055ac <HAL_UART_IRQHandler+0x514>
 800558e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f92f 	bl	80057fe <UART_EndTransmit_IT>
    return;
 80055a0:	e004      	b.n	80055ac <HAL_UART_IRQHandler+0x514>
    return;
 80055a2:	bf00      	nop
 80055a4:	e002      	b.n	80055ac <HAL_UART_IRQHandler+0x514>
      return;
 80055a6:	bf00      	nop
 80055a8:	e000      	b.n	80055ac <HAL_UART_IRQHandler+0x514>
      return;
 80055aa:	bf00      	nop
  }
}
 80055ac:	37e8      	adds	r7, #232	; 0xe8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop

080055b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	460b      	mov	r3, r1
 80055e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	4613      	mov	r3, r2
 8005600:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	88fa      	ldrh	r2, [r7, #6]
 800560c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	88fa      	ldrh	r2, [r7, #6]
 8005612:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2222      	movs	r2, #34	; 0x22
 800561e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d007      	beq.n	8005642 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005640:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695a      	ldr	r2, [r3, #20]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0201 	orr.w	r2, r2, #1
 8005650:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f042 0220 	orr.w	r2, r2, #32
 8005660:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005670:	b480      	push	{r7}
 8005672:	b095      	sub	sp, #84	; 0x54
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	330c      	adds	r3, #12
 800567e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800568e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	330c      	adds	r3, #12
 8005696:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005698:	643a      	str	r2, [r7, #64]	; 0x40
 800569a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800569e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e5      	bne.n	8005678 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3314      	adds	r3, #20
 80056b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	f023 0301 	bic.w	r3, r3, #1
 80056c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3314      	adds	r3, #20
 80056ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d4:	e841 2300 	strex	r3, r2, [r1]
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e5      	bne.n	80056ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d119      	bne.n	800571c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	330c      	adds	r3, #12
 80056ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	e853 3f00 	ldrex	r3, [r3]
 80056f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f023 0310 	bic.w	r3, r3, #16
 80056fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	330c      	adds	r3, #12
 8005706:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005708:	61ba      	str	r2, [r7, #24]
 800570a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	6979      	ldr	r1, [r7, #20]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	613b      	str	r3, [r7, #16]
   return(result);
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e5      	bne.n	80056e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	631a      	str	r2, [r3, #48]	; 0x30
}
 800572a:	bf00      	nop
 800572c:	3754      	adds	r7, #84	; 0x54
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f7ff ff39 	bl	80055c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005756:	bf00      	nop
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800575e:	b480      	push	{r7}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b21      	cmp	r3, #33	; 0x21
 8005770:	d13e      	bne.n	80057f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577a:	d114      	bne.n	80057a6 <UART_Transmit_IT+0x48>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d110      	bne.n	80057a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005798:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	1c9a      	adds	r2, r3, #2
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	621a      	str	r2, [r3, #32]
 80057a4:	e008      	b.n	80057b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	1c59      	adds	r1, r3, #1
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6211      	str	r1, [r2, #32]
 80057b0:	781a      	ldrb	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	4619      	mov	r1, r3
 80057c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10f      	bne.n	80057ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057ec:	2300      	movs	r3, #0
 80057ee:	e000      	b.n	80057f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057f0:	2302      	movs	r3, #2
  }
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b082      	sub	sp, #8
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005814:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff fec8 	bl	80055b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b08c      	sub	sp, #48	; 0x30
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b22      	cmp	r3, #34	; 0x22
 8005840:	f040 80ab 	bne.w	800599a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584c:	d117      	bne.n	800587e <UART_Receive_IT+0x50>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d113      	bne.n	800587e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005856:	2300      	movs	r3, #0
 8005858:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	b29b      	uxth	r3, r3
 8005868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586c:	b29a      	uxth	r2, r3
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005876:	1c9a      	adds	r2, r3, #2
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	629a      	str	r2, [r3, #40]	; 0x28
 800587c:	e026      	b.n	80058cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005882:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005884:	2300      	movs	r3, #0
 8005886:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005890:	d007      	beq.n	80058a2 <UART_Receive_IT+0x74>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10a      	bne.n	80058b0 <UART_Receive_IT+0x82>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	e008      	b.n	80058c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	4619      	mov	r1, r3
 80058da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d15a      	bne.n	8005996 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0220 	bic.w	r2, r2, #32
 80058ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695a      	ldr	r2, [r3, #20]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0201 	bic.w	r2, r2, #1
 800590e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591c:	2b01      	cmp	r3, #1
 800591e:	d135      	bne.n	800598c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	330c      	adds	r3, #12
 800592c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	613b      	str	r3, [r7, #16]
   return(result);
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f023 0310 	bic.w	r3, r3, #16
 800593c:	627b      	str	r3, [r7, #36]	; 0x24
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	330c      	adds	r3, #12
 8005944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005946:	623a      	str	r2, [r7, #32]
 8005948:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	69f9      	ldr	r1, [r7, #28]
 800594c:	6a3a      	ldr	r2, [r7, #32]
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	61bb      	str	r3, [r7, #24]
   return(result);
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e5      	bne.n	8005926 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0310 	and.w	r3, r3, #16
 8005964:	2b10      	cmp	r3, #16
 8005966:	d10a      	bne.n	800597e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005968:	2300      	movs	r3, #0
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005982:	4619      	mov	r1, r3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7ff fe29 	bl	80055dc <HAL_UARTEx_RxEventCallback>
 800598a:	e002      	b.n	8005992 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7fd fced 	bl	800336c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	e002      	b.n	800599c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	e000      	b.n	800599c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800599a:	2302      	movs	r3, #2
  }
}
 800599c:	4618      	mov	r0, r3
 800599e:	3730      	adds	r7, #48	; 0x30
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059a8:	b0c0      	sub	sp, #256	; 0x100
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c0:	68d9      	ldr	r1, [r3, #12]
 80059c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	ea40 0301 	orr.w	r3, r0, r1
 80059cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	431a      	orrs	r2, r3
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059fc:	f021 010c 	bic.w	r1, r1, #12
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1e:	6999      	ldr	r1, [r3, #24]
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	ea40 0301 	orr.w	r3, r0, r1
 8005a2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	4b8f      	ldr	r3, [pc, #572]	; (8005c70 <UART_SetConfig+0x2cc>)
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d005      	beq.n	8005a44 <UART_SetConfig+0xa0>
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	4b8d      	ldr	r3, [pc, #564]	; (8005c74 <UART_SetConfig+0x2d0>)
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d104      	bne.n	8005a4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a44:	f7fe ffb6 	bl	80049b4 <HAL_RCC_GetPCLK2Freq>
 8005a48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a4c:	e003      	b.n	8005a56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a4e:	f7fe ff9d 	bl	800498c <HAL_RCC_GetPCLK1Freq>
 8005a52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a60:	f040 810c 	bne.w	8005c7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a76:	4622      	mov	r2, r4
 8005a78:	462b      	mov	r3, r5
 8005a7a:	1891      	adds	r1, r2, r2
 8005a7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a7e:	415b      	adcs	r3, r3
 8005a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a86:	4621      	mov	r1, r4
 8005a88:	eb12 0801 	adds.w	r8, r2, r1
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	eb43 0901 	adc.w	r9, r3, r1
 8005a92:	f04f 0200 	mov.w	r2, #0
 8005a96:	f04f 0300 	mov.w	r3, #0
 8005a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aa6:	4690      	mov	r8, r2
 8005aa8:	4699      	mov	r9, r3
 8005aaa:	4623      	mov	r3, r4
 8005aac:	eb18 0303 	adds.w	r3, r8, r3
 8005ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ab4:	462b      	mov	r3, r5
 8005ab6:	eb49 0303 	adc.w	r3, r9, r3
 8005aba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005aca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ace:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	18db      	adds	r3, r3, r3
 8005ad6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ad8:	4613      	mov	r3, r2
 8005ada:	eb42 0303 	adc.w	r3, r2, r3
 8005ade:	657b      	str	r3, [r7, #84]	; 0x54
 8005ae0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ae4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ae8:	f7fa fb72 	bl	80001d0 <__aeabi_uldivmod>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4b61      	ldr	r3, [pc, #388]	; (8005c78 <UART_SetConfig+0x2d4>)
 8005af2:	fba3 2302 	umull	r2, r3, r3, r2
 8005af6:	095b      	lsrs	r3, r3, #5
 8005af8:	011c      	lsls	r4, r3, #4
 8005afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	464b      	mov	r3, r9
 8005b10:	1891      	adds	r1, r2, r2
 8005b12:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b14:	415b      	adcs	r3, r3
 8005b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b1c:	4641      	mov	r1, r8
 8005b1e:	eb12 0a01 	adds.w	sl, r2, r1
 8005b22:	4649      	mov	r1, r9
 8005b24:	eb43 0b01 	adc.w	fp, r3, r1
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b3c:	4692      	mov	sl, r2
 8005b3e:	469b      	mov	fp, r3
 8005b40:	4643      	mov	r3, r8
 8005b42:	eb1a 0303 	adds.w	r3, sl, r3
 8005b46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b4a:	464b      	mov	r3, r9
 8005b4c:	eb4b 0303 	adc.w	r3, fp, r3
 8005b50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	18db      	adds	r3, r3, r3
 8005b6c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b6e:	4613      	mov	r3, r2
 8005b70:	eb42 0303 	adc.w	r3, r2, r3
 8005b74:	647b      	str	r3, [r7, #68]	; 0x44
 8005b76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b7e:	f7fa fb27 	bl	80001d0 <__aeabi_uldivmod>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4611      	mov	r1, r2
 8005b88:	4b3b      	ldr	r3, [pc, #236]	; (8005c78 <UART_SetConfig+0x2d4>)
 8005b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b8e:	095b      	lsrs	r3, r3, #5
 8005b90:	2264      	movs	r2, #100	; 0x64
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
 8005b96:	1acb      	subs	r3, r1, r3
 8005b98:	00db      	lsls	r3, r3, #3
 8005b9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b9e:	4b36      	ldr	r3, [pc, #216]	; (8005c78 <UART_SetConfig+0x2d4>)
 8005ba0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bac:	441c      	add	r4, r3
 8005bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005bbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005bc0:	4642      	mov	r2, r8
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	1891      	adds	r1, r2, r2
 8005bc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bc8:	415b      	adcs	r3, r3
 8005bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bd0:	4641      	mov	r1, r8
 8005bd2:	1851      	adds	r1, r2, r1
 8005bd4:	6339      	str	r1, [r7, #48]	; 0x30
 8005bd6:	4649      	mov	r1, r9
 8005bd8:	414b      	adcs	r3, r1
 8005bda:	637b      	str	r3, [r7, #52]	; 0x34
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005be8:	4659      	mov	r1, fp
 8005bea:	00cb      	lsls	r3, r1, #3
 8005bec:	4651      	mov	r1, sl
 8005bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bf2:	4651      	mov	r1, sl
 8005bf4:	00ca      	lsls	r2, r1, #3
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	4642      	mov	r2, r8
 8005bfe:	189b      	adds	r3, r3, r2
 8005c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c04:	464b      	mov	r3, r9
 8005c06:	460a      	mov	r2, r1
 8005c08:	eb42 0303 	adc.w	r3, r2, r3
 8005c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c24:	460b      	mov	r3, r1
 8005c26:	18db      	adds	r3, r3, r3
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	eb42 0303 	adc.w	r3, r2, r3
 8005c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c3a:	f7fa fac9 	bl	80001d0 <__aeabi_uldivmod>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	4b0d      	ldr	r3, [pc, #52]	; (8005c78 <UART_SetConfig+0x2d4>)
 8005c44:	fba3 1302 	umull	r1, r3, r3, r2
 8005c48:	095b      	lsrs	r3, r3, #5
 8005c4a:	2164      	movs	r1, #100	; 0x64
 8005c4c:	fb01 f303 	mul.w	r3, r1, r3
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	3332      	adds	r3, #50	; 0x32
 8005c56:	4a08      	ldr	r2, [pc, #32]	; (8005c78 <UART_SetConfig+0x2d4>)
 8005c58:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	f003 0207 	and.w	r2, r3, #7
 8005c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4422      	add	r2, r4
 8005c6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c6c:	e105      	b.n	8005e7a <UART_SetConfig+0x4d6>
 8005c6e:	bf00      	nop
 8005c70:	40011000 	.word	0x40011000
 8005c74:	40011400 	.word	0x40011400
 8005c78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c80:	2200      	movs	r2, #0
 8005c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c8e:	4642      	mov	r2, r8
 8005c90:	464b      	mov	r3, r9
 8005c92:	1891      	adds	r1, r2, r2
 8005c94:	6239      	str	r1, [r7, #32]
 8005c96:	415b      	adcs	r3, r3
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c9e:	4641      	mov	r1, r8
 8005ca0:	1854      	adds	r4, r2, r1
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	eb43 0501 	adc.w	r5, r3, r1
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	00eb      	lsls	r3, r5, #3
 8005cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cb6:	00e2      	lsls	r2, r4, #3
 8005cb8:	4614      	mov	r4, r2
 8005cba:	461d      	mov	r5, r3
 8005cbc:	4643      	mov	r3, r8
 8005cbe:	18e3      	adds	r3, r4, r3
 8005cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cc4:	464b      	mov	r3, r9
 8005cc6:	eb45 0303 	adc.w	r3, r5, r3
 8005cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cde:	f04f 0200 	mov.w	r2, #0
 8005ce2:	f04f 0300 	mov.w	r3, #0
 8005ce6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005cea:	4629      	mov	r1, r5
 8005cec:	008b      	lsls	r3, r1, #2
 8005cee:	4621      	mov	r1, r4
 8005cf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	008a      	lsls	r2, r1, #2
 8005cf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005cfc:	f7fa fa68 	bl	80001d0 <__aeabi_uldivmod>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4b60      	ldr	r3, [pc, #384]	; (8005e88 <UART_SetConfig+0x4e4>)
 8005d06:	fba3 2302 	umull	r2, r3, r3, r2
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	011c      	lsls	r4, r3, #4
 8005d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d20:	4642      	mov	r2, r8
 8005d22:	464b      	mov	r3, r9
 8005d24:	1891      	adds	r1, r2, r2
 8005d26:	61b9      	str	r1, [r7, #24]
 8005d28:	415b      	adcs	r3, r3
 8005d2a:	61fb      	str	r3, [r7, #28]
 8005d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d30:	4641      	mov	r1, r8
 8005d32:	1851      	adds	r1, r2, r1
 8005d34:	6139      	str	r1, [r7, #16]
 8005d36:	4649      	mov	r1, r9
 8005d38:	414b      	adcs	r3, r1
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d48:	4659      	mov	r1, fp
 8005d4a:	00cb      	lsls	r3, r1, #3
 8005d4c:	4651      	mov	r1, sl
 8005d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d52:	4651      	mov	r1, sl
 8005d54:	00ca      	lsls	r2, r1, #3
 8005d56:	4610      	mov	r0, r2
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	4642      	mov	r2, r8
 8005d5e:	189b      	adds	r3, r3, r2
 8005d60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d64:	464b      	mov	r3, r9
 8005d66:	460a      	mov	r2, r1
 8005d68:	eb42 0303 	adc.w	r3, r2, r3
 8005d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d88:	4649      	mov	r1, r9
 8005d8a:	008b      	lsls	r3, r1, #2
 8005d8c:	4641      	mov	r1, r8
 8005d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d92:	4641      	mov	r1, r8
 8005d94:	008a      	lsls	r2, r1, #2
 8005d96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d9a:	f7fa fa19 	bl	80001d0 <__aeabi_uldivmod>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	4b39      	ldr	r3, [pc, #228]	; (8005e88 <UART_SetConfig+0x4e4>)
 8005da4:	fba3 1302 	umull	r1, r3, r3, r2
 8005da8:	095b      	lsrs	r3, r3, #5
 8005daa:	2164      	movs	r1, #100	; 0x64
 8005dac:	fb01 f303 	mul.w	r3, r1, r3
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	3332      	adds	r3, #50	; 0x32
 8005db6:	4a34      	ldr	r2, [pc, #208]	; (8005e88 <UART_SetConfig+0x4e4>)
 8005db8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dc2:	441c      	add	r4, r3
 8005dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dc8:	2200      	movs	r2, #0
 8005dca:	673b      	str	r3, [r7, #112]	; 0x70
 8005dcc:	677a      	str	r2, [r7, #116]	; 0x74
 8005dce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005dd2:	4642      	mov	r2, r8
 8005dd4:	464b      	mov	r3, r9
 8005dd6:	1891      	adds	r1, r2, r2
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	415b      	adcs	r3, r3
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005de2:	4641      	mov	r1, r8
 8005de4:	1851      	adds	r1, r2, r1
 8005de6:	6039      	str	r1, [r7, #0]
 8005de8:	4649      	mov	r1, r9
 8005dea:	414b      	adcs	r3, r1
 8005dec:	607b      	str	r3, [r7, #4]
 8005dee:	f04f 0200 	mov.w	r2, #0
 8005df2:	f04f 0300 	mov.w	r3, #0
 8005df6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dfa:	4659      	mov	r1, fp
 8005dfc:	00cb      	lsls	r3, r1, #3
 8005dfe:	4651      	mov	r1, sl
 8005e00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e04:	4651      	mov	r1, sl
 8005e06:	00ca      	lsls	r2, r1, #3
 8005e08:	4610      	mov	r0, r2
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	4642      	mov	r2, r8
 8005e10:	189b      	adds	r3, r3, r2
 8005e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e14:	464b      	mov	r3, r9
 8005e16:	460a      	mov	r2, r1
 8005e18:	eb42 0303 	adc.w	r3, r2, r3
 8005e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	663b      	str	r3, [r7, #96]	; 0x60
 8005e28:	667a      	str	r2, [r7, #100]	; 0x64
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	f04f 0300 	mov.w	r3, #0
 8005e32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e36:	4649      	mov	r1, r9
 8005e38:	008b      	lsls	r3, r1, #2
 8005e3a:	4641      	mov	r1, r8
 8005e3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e40:	4641      	mov	r1, r8
 8005e42:	008a      	lsls	r2, r1, #2
 8005e44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e48:	f7fa f9c2 	bl	80001d0 <__aeabi_uldivmod>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4b0d      	ldr	r3, [pc, #52]	; (8005e88 <UART_SetConfig+0x4e4>)
 8005e52:	fba3 1302 	umull	r1, r3, r3, r2
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	2164      	movs	r1, #100	; 0x64
 8005e5a:	fb01 f303 	mul.w	r3, r1, r3
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	3332      	adds	r3, #50	; 0x32
 8005e64:	4a08      	ldr	r2, [pc, #32]	; (8005e88 <UART_SetConfig+0x4e4>)
 8005e66:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	f003 020f 	and.w	r2, r3, #15
 8005e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4422      	add	r2, r4
 8005e78:	609a      	str	r2, [r3, #8]
}
 8005e7a:	bf00      	nop
 8005e7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e80:	46bd      	mov	sp, r7
 8005e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e86:	bf00      	nop
 8005e88:	51eb851f 	.word	0x51eb851f

08005e8c <__libc_init_array>:
 8005e8c:	b570      	push	{r4, r5, r6, lr}
 8005e8e:	4d0d      	ldr	r5, [pc, #52]	; (8005ec4 <__libc_init_array+0x38>)
 8005e90:	4c0d      	ldr	r4, [pc, #52]	; (8005ec8 <__libc_init_array+0x3c>)
 8005e92:	1b64      	subs	r4, r4, r5
 8005e94:	10a4      	asrs	r4, r4, #2
 8005e96:	2600      	movs	r6, #0
 8005e98:	42a6      	cmp	r6, r4
 8005e9a:	d109      	bne.n	8005eb0 <__libc_init_array+0x24>
 8005e9c:	4d0b      	ldr	r5, [pc, #44]	; (8005ecc <__libc_init_array+0x40>)
 8005e9e:	4c0c      	ldr	r4, [pc, #48]	; (8005ed0 <__libc_init_array+0x44>)
 8005ea0:	f000 f82e 	bl	8005f00 <_init>
 8005ea4:	1b64      	subs	r4, r4, r5
 8005ea6:	10a4      	asrs	r4, r4, #2
 8005ea8:	2600      	movs	r6, #0
 8005eaa:	42a6      	cmp	r6, r4
 8005eac:	d105      	bne.n	8005eba <__libc_init_array+0x2e>
 8005eae:	bd70      	pop	{r4, r5, r6, pc}
 8005eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eb4:	4798      	blx	r3
 8005eb6:	3601      	adds	r6, #1
 8005eb8:	e7ee      	b.n	8005e98 <__libc_init_array+0xc>
 8005eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ebe:	4798      	blx	r3
 8005ec0:	3601      	adds	r6, #1
 8005ec2:	e7f2      	b.n	8005eaa <__libc_init_array+0x1e>
 8005ec4:	080060fc 	.word	0x080060fc
 8005ec8:	080060fc 	.word	0x080060fc
 8005ecc:	080060fc 	.word	0x080060fc
 8005ed0:	08006100 	.word	0x08006100

08005ed4 <memcpy>:
 8005ed4:	440a      	add	r2, r1
 8005ed6:	4291      	cmp	r1, r2
 8005ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005edc:	d100      	bne.n	8005ee0 <memcpy+0xc>
 8005ede:	4770      	bx	lr
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eea:	4291      	cmp	r1, r2
 8005eec:	d1f9      	bne.n	8005ee2 <memcpy+0xe>
 8005eee:	bd10      	pop	{r4, pc}

08005ef0 <memset>:
 8005ef0:	4402      	add	r2, r0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d100      	bne.n	8005efa <memset+0xa>
 8005ef8:	4770      	bx	lr
 8005efa:	f803 1b01 	strb.w	r1, [r3], #1
 8005efe:	e7f9      	b.n	8005ef4 <memset+0x4>

08005f00 <_init>:
 8005f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f02:	bf00      	nop
 8005f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f06:	bc08      	pop	{r3}
 8005f08:	469e      	mov	lr, r3
 8005f0a:	4770      	bx	lr

08005f0c <_fini>:
 8005f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0e:	bf00      	nop
 8005f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f12:	bc08      	pop	{r3}
 8005f14:	469e      	mov	lr, r3
 8005f16:	4770      	bx	lr
