/*
 * task_handler.c
 *
 *  Created on: Dec 25, 2022
 *      Author: Himanshu Mishra
 */
#include "task_handler.h"

const char *Invalid_msg = "/=======INVALID ENTRY=======/\n";
/*========================================
 * Return Value :
 * Parameters :
 * Description :
 * ========================================*/
void Appliances_Handling_Task(void *param)
{
	uint32_t cmd;
	BaseType_t queue_status;
	const char *appliances_menu_msg =  "===========================\n"
									   "|     Appliances Menu     |\n"
									   "===========================\n"
									   "Bulb 1                --->0\n"
									   "Bulb 2                --->1\n"
									   "Fan                   --->2\n"
									   "Enter your choice: ";
	while(1)
	{
		queue_status = xQueueSend(print_queue, &appliances_menu_msg , portMAX_DELAY);
		configASSERT(pdPASS == queue_status);
		xTaskNotifyWait(0, 0, &cmd, portMAX_DELAY);
		if(cmd == '0')
		{
			HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
		}
		else if(cmd == '1')
		{
			HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
		}
		else if(cmd == '2')
		{
			HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
		}
		else
		{
			queue_status = xQueueSend(print_queue, &Invalid_msg , portMAX_DELAY);
			configASSERT(pdPASS == queue_status);
		}
		xTaskNotify(Menu_display_task_handle, cmd, eNoAction);
	}
}

/*========================================
 * Return Value :
 * Parameters :
 * Description :
 * ========================================*/
void Command_Handling_Task(void *param)
{
	uint32_t cmd;
	while(1)
	{
		xTaskNotifyWait(0, 0, &cmd, portMAX_DELAY);
		if(curr_state == e_main_menu_state)
		{
			xTaskNotify(Menu_display_task_handle, cmd, eNoAction);
		}
		else if(curr_state == e_appliances_control_state)
		{
			xTaskNotify(Appliances_task_handle, cmd, eNoAction);
		}
		else
		{
			//Do nothing
		}
	}
}

/*========================================
 * Return Value : None
 * Parameters : it takes void pointer as parameter which can be passed while creating the task
 * Description :
 * ========================================*/
void Menu_Display_Handling_Task(void *param)
{
	BaseType_t queue_status;
	uint32_t cmd;
	const char *menu_msg = "===========================\n"
						   "|           Menu          |\n"
						   "===========================\n"
						   "LED Control           --->0\n"
			               "Exit                  --->1\n"
						   "Enter your choice: ";
	while(1)
	{
		queue_status = xQueueSend(print_queue, &menu_msg , portMAX_DELAY);
		configASSERT(pdPASS == queue_status);
		xTaskNotifyWait(0, 0, &cmd, portMAX_DELAY);

		if(cmd == '0')
		{
			curr_state = e_appliances_control_state;
			xTaskNotify(Appliances_Handling_Task, 0, eNoAction);
			xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
		}
		else if(cmd == '1')
		{
			//update the state
			// Need to implement this part
			xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
		}
		else
		{
			queue_status = xQueueSend(print_queue, &Invalid_msg , portMAX_DELAY);
			configASSERT(pdPASS == queue_status);
		}
	}
}

/*========================================
 * Return Value :
 * Parameters :
 * Description :
 * ========================================*/
void Print_Handling_Task(void *param)
{
	uint8_t *msg = NULL;
	BaseType_t queue_status;
	HAL_StatusTypeDef UART_status;
	while(1)
	{
		queue_status = xQueueReceive(print_queue, msg, portMAX_DELAY);
		if(pdPASS == queue_status)
		{
			UART_status = HAL_UART_Transmit(&huart2, msg, strlen((char *)msg), HAL_MAX_DELAY);
		}
		configASSERT(UART_status == HAL_OK);
	}
}


